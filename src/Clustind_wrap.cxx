/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.15u-20020910-2200
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "Python.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink();
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_CFInfo swig_types[0] 
#define  SWIGTYPE_p_KArray swig_types[1] 
#define  SWIGTYPE_p_double swig_types[2] 
#define  SWIGTYPE_p_psvm_model swig_types[3] 
#define  SWIGTYPE_p_svm_model swig_types[4] 
#define  SWIGTYPE_p_KInfo swig_types[5] 
#define  SWIGTYPE_p_KModel swig_types[6] 
#define  SWIGTYPE_p_SVMOut swig_types[7] 
#define  SWIGTYPE_p_SVMSparseExample swig_types[8] 
#define  SWIGTYPE_p_SVMExample swig_types[9] 
#define  SWIGTYPE_p_LRInfo swig_types[10] 
#define  SWIGTYPE_p_KInput swig_types[11] 
#define  SWIGTYPE_p_CInput swig_types[12] 
#define  SWIGTYPE_p_LRInput swig_types[13] 
#define  SWIGTYPE_p_NBModel swig_types[14] 
#define  SWIGTYPE_p_KList swig_types[15] 
#define  SWIGTYPE_p_KMatrix swig_types[16] 
#define  SWIGTYPE_p_KModels swig_types[17] 
#define  SWIGTYPE_p_DInput swig_types[18] 
#define  SWIGTYPE_p_NBInput swig_types[19] 
#define  SWIGTYPE_p_NBInfo swig_types[20] 
#define  SWIGTYPE_p_CMInfo swig_types[21] 
#define  SWIGTYPE_p_NBResult swig_types[22] 
#define  SWIGTYPE_p_NBList swig_types[23] 
#define  SWIGTYPE_p_SVMInput swig_types[24] 
#define  SWIGTYPE_p_XX swig_types[25] 
#define  SWIGTYPE_p_int swig_types[26] 
#define  SWIGTYPE_p_SVMSparseInput swig_types[27] 
#define  SWIGTYPE_p_CHInfo swig_types[28] 
static swig_type_info *swig_types[30];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _orngCRS.so
  ------------------------------------------------*/
#define SWIG_init    init_orngCRS

#define SWIG_name    "_orngCRS"

#include "interface.h"
#include "svm.h"
#include "nb.h"
#include "kikuchi.h"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_svm_destroy_model(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct svm_model *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:svm_destroy_model",&obj0)) goto fail;
    {
        PyObject *o, *t, *p, *zz, *uu;
        int m,l,i,j, elements, pairs;
        struct svm_node *x_space;
        struct svm_model *model;
        struct svm_parameter *param;
        
        
        o = obj0;
        model = (struct svm_model *)malloc(sizeof(struct svm_model));
        param = &(model->param);
        model->label = NULL;
        model->nSV = NULL;
        model->probA = NULL;
        model->probB = NULL;
        
        if (!PyDict_Check(o)) {
            PyErr_SetString(PyExc_TypeError,"must be a dictionary");
            free(model);
            return NULL;
        }
        t = PyDict_GetItemString(o, "svm_type");
        if (!PyInt_Check(t)) {
            PyErr_SetString(PyExc_TypeError,"svm_type missing");
            free(model);
            return NULL;
        }
        param->svm_type = PyInt_AsLong(t);
        t = PyDict_GetItemString(o, "kernel_type");
        if (!PyInt_Check(t)) {
            PyErr_SetString(PyExc_TypeError,"kernel_type missing");
            free(model);
            return NULL;
        }
        param->kernel_type = PyInt_AsLong(t);
        
        if(param->kernel_type == POLY) {
            t = PyDict_GetItemString(o, "degree");
            if (!PyFloat_Check(t)) {
                PyErr_SetString(PyExc_TypeError,"degree missing");
                free(model);
                return NULL;
            }
            param->degree = PyFloat_AsDouble(t);
        }
        
        if(param->kernel_type == POLY || param->kernel_type == RBF || param->kernel_type == SIGMOID) {
            t = PyDict_GetItemString(o, "gamma");
            if (!PyFloat_Check(t)) {
                PyErr_SetString(PyExc_TypeError,"gamma missing");
                free(model);
                return NULL;
            }
            param->gamma = PyFloat_AsDouble(t);
        }
        
        if(param->kernel_type == POLY || param->kernel_type == SIGMOID) {
            t = PyDict_GetItemString(o, "coef0");
            if (!PyFloat_Check(t)) {
                PyErr_SetString(PyExc_TypeError,"coef0 missing");
                free(model);
                return NULL;
            }
            param->coef0 = PyFloat_AsDouble(t);
        }
        
        t = PyDict_GetItemString(o, "nr_class");
        if (!PyInt_Check(t)) {
            PyErr_SetString(PyExc_TypeError,"nr_class missing");
            free(model);
            return NULL;
        }
        m = model->nr_class = PyInt_AsLong(t);
        t = PyDict_GetItemString(o, "total_sv");
        if (!PyInt_Check(t)) {
            PyErr_SetString(PyExc_TypeError,"total_sv missing");
            free(model);
            return NULL;
        }
        l = model->l = PyInt_AsLong(t);
        
        
        t = PyDict_GetItemString(o, "rho");
        if (!PyList_Check(t)) {
            PyErr_SetString(PyExc_TypeError,"rho missing");
            free(model);
            return NULL;
        }
        pairs = m*(m-1)/2;
        model->rho = (double *)malloc(sizeof(double)*pairs);
        for(i=0;i<pairs;i++) {
            p = PyList_GetItem(t, i);
            model->rho[i] = PyFloat_AsDouble(p);
        }
        
        t = PyDict_GetItemString(o, "ProbA");
        if (t != NULL) {
            model->probA = (double *)malloc(sizeof(double)*pairs);
            for(i=0;i<pairs;i++) {
                p = PyList_GetItem(t, i);
                model->probA[i] = PyFloat_AsDouble(p);
            }
        }
        
        t = PyDict_GetItemString(o, "ProbB");
        if (t != NULL) {
            model->probB = (double *)malloc(sizeof(double)*pairs);
            for(i=0;i<pairs;i++) {
                p = PyList_GetItem(t, i);
                model->probB[i] = PyFloat_AsDouble(p);
            }
        }
        
        t = PyDict_GetItemString(o, "label");
        if (t != NULL) {
            model->label = (int *)malloc(sizeof(int)*m);
            for(i=0;i<m;i++) {
                p = PyList_GetItem(t, i);
                model->label[i] = PyInt_AsLong(p);
            }
        }
        
        t = PyDict_GetItemString(o, "nr_sv");
        if (t != NULL) {
            model->nSV = (int *)malloc(sizeof(int)*m);
            for(i=0;i<m;i++) {
                p = PyList_GetItem(t, i);
                model->nSV[i] = PyInt_AsLong(p);
            }
        }
        
        t = PyDict_GetItemString(o, "elements");
        elements = PyInt_AsLong(t);
        
        model->sv_coef = (double **)malloc(sizeof(double *)*m);
        model->SV = (struct svm_node **)malloc(sizeof(struct svm_node **)*l);
        for(i=0;i<m;i++)
        model->sv_coef[i] = (double *)malloc(sizeof(double)*l);
        
        x_space = (struct svm_node *)malloc(sizeof(struct svm_node)*elements);
        
        p = PyDict_GetItemString(o, "SV");
        if (!PyList_Check(p) || PyList_Size(p)!=l) {
            PyErr_SetString(PyExc_TypeError,"SV list missing");
            free(model);
            return NULL;
        }
        j = 0;
        for(i=0;i<l;i++)
        {
            int jj, kk;
            
            zz = PyList_GetItem(p,i);
            if (!PyList_Check(zz)) {
                PyErr_SetString(PyExc_TypeError,"wrong SV vector (leak)"); return NULL;
            }
            
            t = PyList_GetItem(zz, 0); // sv_coef is first
            if (!PyList_Check(t) || PyList_Size(t)!= m-1 ) {
                PyErr_SetString(PyExc_TypeError,"SV coef wrong (leak)"); return NULL;
            }
            
            for(jj=0;jj<m-1;jj++) {
                uu = PyList_GetItem(t, jj);
                if (!PyFloat_Check(uu)) {
                    PyErr_SetString(PyExc_TypeError,"SV coef entry wrong (leak)"); return NULL;
                }
                model->sv_coef[jj][i] = PyFloat_AsDouble(uu);
            }
            
            model->SV[i] = &(x_space[j]);
            
            kk = PyList_Size(zz);
            
            for (jj = 1; jj < kk; ++jj) {
                t =PyList_GetItem(zz, jj);
                if (!PyTuple_Check(t)) {
                    PyErr_SetString(PyExc_TypeError,"SV entry wrong (leak)"); return NULL;
                }
                
                uu = PyTuple_GetItem(t,0);
                x_space[j].index = PyInt_AsLong(uu);
                uu = PyTuple_GetItem(t,1);
                x_space[j].value = PyFloat_AsDouble(uu);
                
                ++j;
            }
            x_space[j++].index = -1;
        }
        assert(j == elements);
        model->free_sv = 1;	// XXX
        arg1 = model;
    }
    svm_destroy_model(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SVMClassifier(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct svm_model *arg1 ;
    psvm_model result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SVMClassifier",&obj0)) goto fail;
    {
        PyObject *o, *t, *p, *zz, *uu;
        int m,l,i,j, elements, pairs;
        struct svm_node *x_space;
        struct svm_model *model;
        struct svm_parameter *param;
        
        
        o = obj0;
        model = (struct svm_model *)malloc(sizeof(struct svm_model));
        param = &(model->param);
        model->label = NULL;
        model->nSV = NULL;
        model->probA = NULL;
        model->probB = NULL;
        
        if (!PyDict_Check(o)) {
            PyErr_SetString(PyExc_TypeError,"must be a dictionary");
            free(model);
            return NULL;
        }
        t = PyDict_GetItemString(o, "svm_type");
        if (!PyInt_Check(t)) {
            PyErr_SetString(PyExc_TypeError,"svm_type missing");
            free(model);
            return NULL;
        }
        param->svm_type = PyInt_AsLong(t);
        t = PyDict_GetItemString(o, "kernel_type");
        if (!PyInt_Check(t)) {
            PyErr_SetString(PyExc_TypeError,"kernel_type missing");
            free(model);
            return NULL;
        }
        param->kernel_type = PyInt_AsLong(t);
        
        if(param->kernel_type == POLY) {
            t = PyDict_GetItemString(o, "degree");
            if (!PyFloat_Check(t)) {
                PyErr_SetString(PyExc_TypeError,"degree missing");
                free(model);
                return NULL;
            }
            param->degree = PyFloat_AsDouble(t);
        }
        
        if(param->kernel_type == POLY || param->kernel_type == RBF || param->kernel_type == SIGMOID) {
            t = PyDict_GetItemString(o, "gamma");
            if (!PyFloat_Check(t)) {
                PyErr_SetString(PyExc_TypeError,"gamma missing");
                free(model);
                return NULL;
            }
            param->gamma = PyFloat_AsDouble(t);
        }
        
        if(param->kernel_type == POLY || param->kernel_type == SIGMOID) {
            t = PyDict_GetItemString(o, "coef0");
            if (!PyFloat_Check(t)) {
                PyErr_SetString(PyExc_TypeError,"coef0 missing");
                free(model);
                return NULL;
            }
            param->coef0 = PyFloat_AsDouble(t);
        }
        
        t = PyDict_GetItemString(o, "nr_class");
        if (!PyInt_Check(t)) {
            PyErr_SetString(PyExc_TypeError,"nr_class missing");
            free(model);
            return NULL;
        }
        m = model->nr_class = PyInt_AsLong(t);
        t = PyDict_GetItemString(o, "total_sv");
        if (!PyInt_Check(t)) {
            PyErr_SetString(PyExc_TypeError,"total_sv missing");
            free(model);
            return NULL;
        }
        l = model->l = PyInt_AsLong(t);
        
        
        t = PyDict_GetItemString(o, "rho");
        if (!PyList_Check(t)) {
            PyErr_SetString(PyExc_TypeError,"rho missing");
            free(model);
            return NULL;
        }
        pairs = m*(m-1)/2;
        model->rho = (double *)malloc(sizeof(double)*pairs);
        for(i=0;i<pairs;i++) {
            p = PyList_GetItem(t, i);
            model->rho[i] = PyFloat_AsDouble(p);
        }
        
        t = PyDict_GetItemString(o, "ProbA");
        if (t != NULL) {
            model->probA = (double *)malloc(sizeof(double)*pairs);
            for(i=0;i<pairs;i++) {
                p = PyList_GetItem(t, i);
                model->probA[i] = PyFloat_AsDouble(p);
            }
        }
        
        t = PyDict_GetItemString(o, "ProbB");
        if (t != NULL) {
            model->probB = (double *)malloc(sizeof(double)*pairs);
            for(i=0;i<pairs;i++) {
                p = PyList_GetItem(t, i);
                model->probB[i] = PyFloat_AsDouble(p);
            }
        }
        
        t = PyDict_GetItemString(o, "label");
        if (t != NULL) {
            model->label = (int *)malloc(sizeof(int)*m);
            for(i=0;i<m;i++) {
                p = PyList_GetItem(t, i);
                model->label[i] = PyInt_AsLong(p);
            }
        }
        
        t = PyDict_GetItemString(o, "nr_sv");
        if (t != NULL) {
            model->nSV = (int *)malloc(sizeof(int)*m);
            for(i=0;i<m;i++) {
                p = PyList_GetItem(t, i);
                model->nSV[i] = PyInt_AsLong(p);
            }
        }
        
        t = PyDict_GetItemString(o, "elements");
        elements = PyInt_AsLong(t);
        
        model->sv_coef = (double **)malloc(sizeof(double *)*m);
        model->SV = (struct svm_node **)malloc(sizeof(struct svm_node **)*l);
        for(i=0;i<m;i++)
        model->sv_coef[i] = (double *)malloc(sizeof(double)*l);
        
        x_space = (struct svm_node *)malloc(sizeof(struct svm_node)*elements);
        
        p = PyDict_GetItemString(o, "SV");
        if (!PyList_Check(p) || PyList_Size(p)!=l) {
            PyErr_SetString(PyExc_TypeError,"SV list missing");
            free(model);
            return NULL;
        }
        j = 0;
        for(i=0;i<l;i++)
        {
            int jj, kk;
            
            zz = PyList_GetItem(p,i);
            if (!PyList_Check(zz)) {
                PyErr_SetString(PyExc_TypeError,"wrong SV vector (leak)"); return NULL;
            }
            
            t = PyList_GetItem(zz, 0); // sv_coef is first
            if (!PyList_Check(t) || PyList_Size(t)!= m-1 ) {
                PyErr_SetString(PyExc_TypeError,"SV coef wrong (leak)"); return NULL;
            }
            
            for(jj=0;jj<m-1;jj++) {
                uu = PyList_GetItem(t, jj);
                if (!PyFloat_Check(uu)) {
                    PyErr_SetString(PyExc_TypeError,"SV coef entry wrong (leak)"); return NULL;
                }
                model->sv_coef[jj][i] = PyFloat_AsDouble(uu);
            }
            
            model->SV[i] = &(x_space[j]);
            
            kk = PyList_Size(zz);
            
            for (jj = 1; jj < kk; ++jj) {
                t =PyList_GetItem(zz, jj);
                if (!PyTuple_Check(t)) {
                    PyErr_SetString(PyExc_TypeError,"SV entry wrong (leak)"); return NULL;
                }
                
                uu = PyTuple_GetItem(t,0);
                x_space[j].index = PyInt_AsLong(uu);
                uu = PyTuple_GetItem(t,1);
                x_space[j].value = PyFloat_AsDouble(uu);
                
                ++j;
            }
            x_space[j++].index = -1;
        }
        assert(j == elements);
        model->free_sv = 1;	// XXX
        arg1 = model;
    }
    result = SVMClassifier(arg1);
    
    {
        psvm_model * resultptr;
        resultptr = new psvm_model((psvm_model &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_psvm_model, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SVMLearnS(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct SVMSparseInput *arg1 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    double arg8 ;
    double arg9 ;
    double arg10 ;
    double arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    double *arg15 ;
    int *arg16 ;
    struct svm_model *result;
    PyObject * obj0  = 0 ;
    PyObject * obj14  = 0 ;
    PyObject * obj15  = 0 ;
    
    {
        arg1 = NULL;
    }
    {
        arg15 = NULL;
    }
    {
        arg16 = NULL;
    }
    if(!PyArg_ParseTuple(args,(char *)"OiiddddddddiiiOO:SVMLearnS",&obj0,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9,&arg10,&arg11,&arg12,&arg13,&arg14,&obj14,&obj15)) goto fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj0)) {
            int i, j, k, nex, nvals;
            
            nex = PyList_Size(obj0);
            nvals = 0;
            
            arg1 = (struct SVMSparseInput *) malloc(sizeof(struct SVMSparseInput));
            arg1->elements = 0;
            arg1->index = NULL;
            arg1->value = NULL;
            arg1->label = NULL;
            for (i = 0; i < nex; i++) {
                PyObject *ex = PyList_GetItem(obj0,i);
                // example
                if (PyList_Check(ex)) {
                    nvals = PyList_Size(ex)-1;
                    if (arg1->index == NULL) {
                        arg1->nn = nex;
                        arg1->lengths = (int *)malloc(arg1->nn*sizeof(int));
                        arg1->value = (double **)malloc(arg1->nn*sizeof(double *));
                        arg1->index = (int **)malloc(arg1->nn*sizeof(int *));
                        arg1->label = (double *)malloc(arg1->nn*sizeof(double));
                        for(j = 0; j < nex; ++j)
                        arg1->lengths[j] = -1;
                    }
                    // fetch the class (must be binary)
                    PyObject *p = PyList_GetItem(ex,0);
                    if (p == NULL) {
                        PyErr_SetString(PyExc_TypeError,"cannot fetch label");
                        SVMscleanup(arg1);
                        return NULL;
                    }
                    if (PyInt_Check(p) || PyLong_Check(p)) {
                        arg1->label[i] = (double)PyInt_AsLong(p);
                    }else if(PyFloat_Check(p)) {
                        arg1->label[i] = PyFloat_AsDouble(p);
                    }else {
                        PyErr_SetString(PyExc_TypeError,"class not float or int");
                        SVMscleanup(arg1);
                        return NULL;
                    }
                    arg1->lengths[i] = nvals-1;
                    arg1->elements += nvals-1;
                    if(nvals > 0) {
                        arg1->value[i] = (double *)malloc((nvals-1)*sizeof(double));
                        arg1->index[i] = (int *)malloc((nvals-1)*sizeof(int));
                    }
                    // fetch the attribute values
                    for (j = 1; j < nvals; ++j) {
                        PyObject *p = PyList_GetItem(ex,j);
                        if(PyTuple_Check(p)) {
                            PyObject *idx = PyTuple_GetItem(p,0); 
                            PyObject *val = PyTuple_GetItem(p,1); 
                            if ((PyInt_Check(idx) || PyLong_Check(idx)) && (PyInt_AsLong(idx) >= 1) ) {
                                arg1->index[i][j-1] = PyInt_AsLong(idx);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"index not a positive integer");
                                SVMscleanup(arg1);
                                return NULL;
                            }
                            if (PyInt_Check(val) || PyLong_Check(val)) {
                                arg1->value[i][j-1] = (double)PyInt_AsLong(val);
                            }else if(PyFloat_Check(val)) {
                                arg1->value[i][j-1] = PyFloat_AsDouble(val);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"value not an integer or a float");
                                SVMscleanup(arg1);
                                return NULL;
                            }
                        }else {
                            PyErr_SetString(PyExc_TypeError,"attribute values within an example must be tuples (index,value)");
                            SVMscleanup(arg1);
                            return NULL;
                        }
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"example table must contain examples as lists of tuples");
                    SVMscleanup(arg1);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    {
        /* Check if is a list */
        if (PyList_Check(obj14)) {
            int size = PyList_Size(obj14);
            int i = 0;
            arg15 = (double *) malloc((1+size)*sizeof(double));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj14,i);
                if (PyFloat_Check(o))
                arg15[i] = PyFloat_AsDouble(PyList_GetItem(obj14,i));
                else if (PyInt_Check(o)) {
                    arg15[i] = PyInt_AsLong(PyList_GetItem(obj14,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg15);
                    return NULL;
                }
            }
            arg15[i] = 3.1459001;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    {
        /* Check if is a list */
        if (PyList_Check(obj15)) {
            int size = PyList_Size(obj15);
            int i = 0;
            arg16 = (int *) malloc((1+size)*sizeof(int));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj15,i);
                if (PyInt_Check(o)) {
                    arg16[i] = PyInt_AsLong(PyList_GetItem(obj15,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg16);
                    return NULL;
                }
            }
            arg16[i] = -1;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    result = (struct svm_model *)SVMLearnS(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    
    {
        struct svm_parameter *param = &(result->param);
        double **sv_coef;
        struct svm_node **SV;
        struct svm_model *model = result;
        int i, j, nr_class, l, elements;
        PyObject *o, *t, *p, *ip;
        
        o = PyDict_New();
        t = PyInt_FromLong(param->svm_type);
        PyDict_SetItemString(o, "svm_type", t); Py_XDECREF(t);
        t = PyInt_FromLong(param->kernel_type);
        PyDict_SetItemString(o, "kernel_type", t); Py_XDECREF(t);
        
        if(param->kernel_type == POLY) {
            t =	PyFloat_FromDouble(param->degree);
            PyDict_SetItemString(o, "degree", t); Py_XDECREF(t);
        }
        
        if(param->kernel_type == POLY || param->kernel_type == RBF || param->kernel_type == SIGMOID) {
            t = PyFloat_FromDouble(param->gamma);
            PyDict_SetItemString(o, "gamma", t); Py_XDECREF(t);
        }
        
        if(param->kernel_type == POLY || param->kernel_type == SIGMOID) {
            t = PyFloat_FromDouble(param->coef0);
            PyDict_SetItemString(o, "coef0", t); Py_XDECREF(t);
        }
        
        nr_class = model->nr_class;
        l = model->l;
        
        t = PyInt_FromLong(nr_class);
        PyDict_SetItemString(o, "nr_class", t); Py_XDECREF(t);
        t = PyInt_FromLong(l);
        PyDict_SetItemString(o, "total_sv", t); Py_XDECREF(t);
        
        {
            t = PyList_New(nr_class*(nr_class-1)/2);
            for(i=0;i<nr_class*(nr_class-1)/2;i++) {
                PyList_SetItem(t, i, PyFloat_FromDouble(result->rho[i]));
            }
            PyDict_SetItemString(o, "rho", t); Py_XDECREF(t);
        }
        
        if(result->probA) {
            t = PyList_New(nr_class*(nr_class-1)/2);
            for(i=0;i<nr_class*(nr_class-1)/2;i++) {
                PyList_SetItem(t, i, PyFloat_FromDouble(result->probA[i]));
            }
            PyDict_SetItemString(o, "ProbA", t); Py_XDECREF(t);
        }
        
        if(result->probB) {
            t = PyList_New(nr_class*(nr_class-1)/2);
            for(i=0;i<nr_class*(nr_class-1)/2;i++) {
                PyList_SetItem(t, i, PyFloat_FromDouble(result->probB[i]));
            }
            PyDict_SetItemString(o, "ProbB", t); Py_XDECREF(t);
        }
        
        if(result->label) {
            t = PyList_New(nr_class);
            for(i=0;i<nr_class;i++) {
                PyList_SetItem(t, i, PyInt_FromLong(result->label[i]));
            }
            PyDict_SetItemString(o, "label", t); Py_XDECREF(t);
        }
        
        
        if(result->nSV) {
            t = PyList_New(nr_class);
            for(i=0;i<nr_class;i++) {
                PyList_SetItem(t, i, PyInt_FromLong(result->nSV[i]));
            }
            PyDict_SetItemString(o, "nr_sv", t); Py_XDECREF(t);
        }
        
        
        sv_coef = model->sv_coef;
        SV = model->SV;
        
        p = PyList_New(l);
        ip = PyList_New(l);
        elements = l; // terminals
        for(i=0;i<l;i++)
        {
            const struct svm_node *pp;
            PyObject *zz;
            
            t = PyList_New(nr_class-1);
            for(j=0;j<nr_class-1;j++) {
                PyList_SetItem(t, j, PyFloat_FromDouble(result->sv_coef[j][i]));
            }
            
            // count attributes
            pp = SV[i];
            PyList_SetItem(ip, i, PyInt_FromLong(model->SVidx[i])); // save the SV index
            j = 1;
            while(pp->index != -1)
            {
                pp++; ++j;
            }
            
            // allocate
            zz = PyList_New(j);
            PyList_SetItem(zz, 0, t); // sv_coef is first
            
            pp = SV[i];
            j = 0;
            while(pp->index != -1)
            {
                t = PyTuple_New(2);
                PyTuple_SetItem(t,0,PyInt_FromLong(pp->index));
                PyTuple_SetItem(t,1,PyFloat_FromDouble(pp->value));
                pp++; ++j; ++elements;
                PyList_SetItem(zz,j,t);
            }
            
            PyList_SetItem(p,i,zz);
        }
        PyDict_SetItemString(o, "SV", p); Py_XDECREF(p);
        PyDict_SetItemString(o, "SVi", ip); Py_XDECREF(ip);
        
        //  printf("svmo:2\n");
        t = PyInt_FromLong(elements);
        PyDict_SetItemString(o, "elements", t); Py_XDECREF(t);
        svm_destroy_model(result);
        resultobj = o;
    }
    {
        if(arg1 != NULL) {
            int i;
            for (i = 0; i < arg1->nn; ++i) {
                if(arg1->lengths[i] > 0) {
                    free((double*)arg1->value[i]);
                    free((int*)arg1->index[i]);
                }
            }
            free((double**) arg1->value);
            free((int**) arg1->index);
            free((double*) arg1->label);
            free((int*) arg1->lengths);
            free((struct SVMSparseInput*) arg1);
        }
    }
    {
        if (arg15 != NULL)
        free((double *) arg15);
    }
    {
        if (arg16 != NULL)
        free((int *) arg16);
    }
    return resultobj;
    fail:
    {
        if(arg1 != NULL) {
            int i;
            for (i = 0; i < arg1->nn; ++i) {
                if(arg1->lengths[i] > 0) {
                    free((double*)arg1->value[i]);
                    free((int*)arg1->index[i]);
                }
            }
            free((double**) arg1->value);
            free((int**) arg1->index);
            free((double*) arg1->label);
            free((int*) arg1->lengths);
            free((struct SVMSparseInput*) arg1);
        }
    }
    {
        if (arg15 != NULL)
        free((double *) arg15);
    }
    {
        if (arg16 != NULL)
        free((int *) arg16);
    }
    return NULL;
}


static PyObject *_wrap_SVMLearn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct SVMInput *arg1 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    double arg8 ;
    double arg9 ;
    double arg10 ;
    double arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    double *arg15 ;
    int *arg16 ;
    struct svm_model *result;
    PyObject * obj0  = 0 ;
    PyObject * obj14  = 0 ;
    PyObject * obj15  = 0 ;
    
    {
        arg1 = NULL;
    }
    {
        arg15 = NULL;
    }
    {
        arg16 = NULL;
    }
    if(!PyArg_ParseTuple(args,(char *)"OiiddddddddiiiOO:SVMLearn",&obj0,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9,&arg10,&arg11,&arg12,&arg13,&arg14,&obj14,&obj15)) goto fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj0)) {
            int i, j, k, size, msize;
            
            size = PyList_Size(obj0);
            msize = 0;
            
            arg1 = (struct SVMInput *) malloc(sizeof(struct SVMInput));
            arg1->data = NULL;
            arg1->masking = NULL;
            arg1->label = NULL;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj0,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o);
                    if (arg1->data == NULL) {
                        msize = zsize;
                        arg1->nn = size;
                        arg1->k = msize-1;
                        arg1->total = (arg1->nn)*(msize-1+1); // size correction, last is class
                        arg1->masking = (char **)malloc(sizeof(char *)*(size+1));
                        for (j = 0; j <= size; ++j) {
                            arg1->masking[j] = (char *)malloc(sizeof(char)*(arg1->k+1));
                            for (k = 0; k <= arg1->k; ++k) {
                                arg1->masking[j][k] = 0;
                            }
                        }
                        arg1->data = (double **)malloc(sizeof(double *)*(size+1));
                        for (j = 0; j <= size; ++j) {
                            arg1->data[j] = (double *)malloc(sizeof(double)*(arg1->k+1));
                        }
                        arg1->label = (double *)malloc(sizeof(double)*(arg1->nn+1));
                    }
                    if (zsize == msize) {
                        // fetch the class (must be binary)
                        PyObject *p = PyList_GetItem(o,zsize-1);
                        if (p == NULL) {
                            PyErr_SetString(PyExc_TypeError,"cannot fetch example");
                            SVMcleanup(arg1);
                            return NULL;
                        }
                        
                        if (PyInt_Check(p) || PyLong_Check(p)) {
                            arg1->label[i] = (double)PyInt_AsLong(p);
                        }else if(PyFloat_Check(p)) {
                            arg1->label[i] = PyFloat_AsDouble(p);
                        }else {
                            PyErr_SetString(PyExc_TypeError,"class not float or int");
                            SVMcleanup(arg1);
                            return NULL;
                        }
                        
                        // fetch the attribute values
                        for (j = 0; j < zsize-1; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            
                            if(PyTuple_Check(p)) {
                                PyObject *ps = PyTuple_GetItem(p,1); // masking
                                if (PyInt_Check(ps) || PyLong_Check(ps)) {
                                    arg1->masking[i][j] = (char)PyInt_AsLong(ps);
                                }else if(PyFloat_Check(ps)) {
                                    arg1->masking[i][j] = (char)PyFloat_AsDouble(ps);
                                }else {
                                    PyErr_SetString(PyExc_TypeError,"masking not 1 or 0");
                                    SVMcleanup(arg1);
                                    return NULL;
                                }
                                p = PyTuple_GetItem(p,0); // foist value
                            }
                            if (PyFloat_Check(p)) {
                                // correct +1 because that array starts at 1
                                arg1->data[i][j] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[i][j] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"examples must contain doubles or ints. if masking, use tuples");
                                SVMcleanup(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"examples must be of equal size");
                        SVMcleanup(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"example table must contain examples as lists");
                    SVMcleanup(arg1);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
        //("svmi:done\n");
    }
    {
        /* Check if is a list */
        if (PyList_Check(obj14)) {
            int size = PyList_Size(obj14);
            int i = 0;
            arg15 = (double *) malloc((1+size)*sizeof(double));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj14,i);
                if (PyFloat_Check(o))
                arg15[i] = PyFloat_AsDouble(PyList_GetItem(obj14,i));
                else if (PyInt_Check(o)) {
                    arg15[i] = PyInt_AsLong(PyList_GetItem(obj14,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg15);
                    return NULL;
                }
            }
            arg15[i] = 3.1459001;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    {
        /* Check if is a list */
        if (PyList_Check(obj15)) {
            int size = PyList_Size(obj15);
            int i = 0;
            arg16 = (int *) malloc((1+size)*sizeof(int));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj15,i);
                if (PyInt_Check(o)) {
                    arg16[i] = PyInt_AsLong(PyList_GetItem(obj15,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg16);
                    return NULL;
                }
            }
            arg16[i] = -1;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    result = (struct svm_model *)SVMLearn(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    
    {
        struct svm_parameter *param = &(result->param);
        double **sv_coef;
        struct svm_node **SV;
        struct svm_model *model = result;
        int i, j, nr_class, l, elements;
        PyObject *o, *t, *p, *ip;
        
        o = PyDict_New();
        t = PyInt_FromLong(param->svm_type);
        PyDict_SetItemString(o, "svm_type", t); Py_XDECREF(t);
        t = PyInt_FromLong(param->kernel_type);
        PyDict_SetItemString(o, "kernel_type", t); Py_XDECREF(t);
        
        if(param->kernel_type == POLY) {
            t =	PyFloat_FromDouble(param->degree);
            PyDict_SetItemString(o, "degree", t); Py_XDECREF(t);
        }
        
        if(param->kernel_type == POLY || param->kernel_type == RBF || param->kernel_type == SIGMOID) {
            t = PyFloat_FromDouble(param->gamma);
            PyDict_SetItemString(o, "gamma", t); Py_XDECREF(t);
        }
        
        if(param->kernel_type == POLY || param->kernel_type == SIGMOID) {
            t = PyFloat_FromDouble(param->coef0);
            PyDict_SetItemString(o, "coef0", t); Py_XDECREF(t);
        }
        
        nr_class = model->nr_class;
        l = model->l;
        
        t = PyInt_FromLong(nr_class);
        PyDict_SetItemString(o, "nr_class", t); Py_XDECREF(t);
        t = PyInt_FromLong(l);
        PyDict_SetItemString(o, "total_sv", t); Py_XDECREF(t);
        
        {
            t = PyList_New(nr_class*(nr_class-1)/2);
            for(i=0;i<nr_class*(nr_class-1)/2;i++) {
                PyList_SetItem(t, i, PyFloat_FromDouble(result->rho[i]));
            }
            PyDict_SetItemString(o, "rho", t); Py_XDECREF(t);
        }
        
        if(result->probA) {
            t = PyList_New(nr_class*(nr_class-1)/2);
            for(i=0;i<nr_class*(nr_class-1)/2;i++) {
                PyList_SetItem(t, i, PyFloat_FromDouble(result->probA[i]));
            }
            PyDict_SetItemString(o, "ProbA", t); Py_XDECREF(t);
        }
        
        if(result->probB) {
            t = PyList_New(nr_class*(nr_class-1)/2);
            for(i=0;i<nr_class*(nr_class-1)/2;i++) {
                PyList_SetItem(t, i, PyFloat_FromDouble(result->probB[i]));
            }
            PyDict_SetItemString(o, "ProbB", t); Py_XDECREF(t);
        }
        
        if(result->label) {
            t = PyList_New(nr_class);
            for(i=0;i<nr_class;i++) {
                PyList_SetItem(t, i, PyInt_FromLong(result->label[i]));
            }
            PyDict_SetItemString(o, "label", t); Py_XDECREF(t);
        }
        
        
        if(result->nSV) {
            t = PyList_New(nr_class);
            for(i=0;i<nr_class;i++) {
                PyList_SetItem(t, i, PyInt_FromLong(result->nSV[i]));
            }
            PyDict_SetItemString(o, "nr_sv", t); Py_XDECREF(t);
        }
        
        
        sv_coef = model->sv_coef;
        SV = model->SV;
        
        p = PyList_New(l);
        ip = PyList_New(l);
        elements = l; // terminals
        for(i=0;i<l;i++)
        {
            const struct svm_node *pp;
            PyObject *zz;
            
            t = PyList_New(nr_class-1);
            for(j=0;j<nr_class-1;j++) {
                PyList_SetItem(t, j, PyFloat_FromDouble(result->sv_coef[j][i]));
            }
            
            // count attributes
            pp = SV[i];
            PyList_SetItem(ip, i, PyInt_FromLong(model->SVidx[i])); // save the SV index
            j = 1;
            while(pp->index != -1)
            {
                pp++; ++j;
            }
            
            // allocate
            zz = PyList_New(j);
            PyList_SetItem(zz, 0, t); // sv_coef is first
            
            pp = SV[i];
            j = 0;
            while(pp->index != -1)
            {
                t = PyTuple_New(2);
                PyTuple_SetItem(t,0,PyInt_FromLong(pp->index));
                PyTuple_SetItem(t,1,PyFloat_FromDouble(pp->value));
                pp++; ++j; ++elements;
                PyList_SetItem(zz,j,t);
            }
            
            PyList_SetItem(p,i,zz);
        }
        PyDict_SetItemString(o, "SV", p); Py_XDECREF(p);
        PyDict_SetItemString(o, "SVi", ip); Py_XDECREF(ip);
        
        //  printf("svmo:2\n");
        t = PyInt_FromLong(elements);
        PyDict_SetItemString(o, "elements", t); Py_XDECREF(t);
        svm_destroy_model(result);
        resultobj = o;
    }
    {
        if(arg1 != NULL) {
            int i;
            //printf("svmc:1\n");
            for (i = 0; i <= arg1->nn; ++i) {
                free((double*)arg1->data[i]);
                free((char*)arg1->masking[i]);
            }
            free((double**) arg1->data);
            free((char**) arg1->masking);
            free((double*) arg1->label);
            free((struct SVMInput*) arg1);
            //("svmc:2\n");
        }
    }
    {
        if (arg15 != NULL)
        free((double *) arg15);
    }
    {
        if (arg16 != NULL)
        free((int *) arg16);
    }
    return resultobj;
    fail:
    {
        if(arg1 != NULL) {
            int i;
            //printf("svmc:1\n");
            for (i = 0; i <= arg1->nn; ++i) {
                free((double*)arg1->data[i]);
                free((char*)arg1->masking[i]);
            }
            free((double**) arg1->data);
            free((char**) arg1->masking);
            free((double*) arg1->label);
            free((struct SVMInput*) arg1);
            //("svmc:2\n");
        }
    }
    {
        if (arg15 != NULL)
        free((double *) arg15);
    }
    {
        if (arg16 != NULL)
        free((int *) arg16);
    }
    return NULL;
}


static PyObject *_wrap_SVMClassify(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    psvm_model arg1 ;
    struct SVMExample *arg2 ;
    double result;
    psvm_model *argp1 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:SVMClassify",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_psvm_model,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            int j, msize;
            
            msize = PyList_Size(obj1);
            
            arg2 = (struct SVMExample *)malloc(sizeof(struct SVMExample));
            arg2->k = msize;
            arg2->data    = (double *)malloc(sizeof(double)*msize);
            arg2->masking = (char *)malloc(sizeof(char)*msize);
            
            // fetch the attribute values
            for (j = 0; j < msize; ++j) {
                PyObject *p = PyList_GetItem(obj1,j);
                
                arg2->masking[j] = 0;
                if(PyTuple_Check(p)) {
                    arg2->masking[j] = 1;
                    p = PyTuple_GetItem(p,0); // foist value
                }
                if (PyFloat_Check(p)) {
                    arg2->data[j] = PyFloat_AsDouble(p);
                }else if (PyInt_Check(p)) {
                    arg2->data[j] = (double)PyInt_AsLong(p);
                }else {
                    PyErr_SetString(PyExc_TypeError,"examples must contain doubles or ints. if masking, use tuples");
                    SVMexcleanup(arg2);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    result = (double)SVMClassify(arg1,arg2);
    
    resultobj = PyFloat_FromDouble(result);
    {
        if (arg2 != NULL) {
            free((double*) arg2->data);
            free((char*) arg2->masking);
            free((struct SVMExample*) arg2);
        }
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL) {
            free((double*) arg2->data);
            free((char*) arg2->masking);
            free((struct SVMExample*) arg2);
        }
    }
    return NULL;
}


static PyObject *_wrap_SVMClassifyP(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    psvm_model arg1 ;
    struct SVMExample *arg2 ;
    struct SVMOut *arg3 ;
    psvm_model *argp1 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct SVMOut *)malloc(sizeof(struct SVMOut));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:SVMClassifyP",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_psvm_model,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            int j, msize;
            
            msize = PyList_Size(obj1);
            
            arg2 = (struct SVMExample *)malloc(sizeof(struct SVMExample));
            arg2->k = msize;
            arg2->data    = (double *)malloc(sizeof(double)*msize);
            arg2->masking = (char *)malloc(sizeof(char)*msize);
            
            // fetch the attribute values
            for (j = 0; j < msize; ++j) {
                PyObject *p = PyList_GetItem(obj1,j);
                
                arg2->masking[j] = 0;
                if(PyTuple_Check(p)) {
                    arg2->masking[j] = 1;
                    p = PyTuple_GetItem(p,0); // foist value
                }
                if (PyFloat_Check(p)) {
                    arg2->data[j] = PyFloat_AsDouble(p);
                }else if (PyInt_Check(p)) {
                    arg2->data[j] = (double)PyInt_AsLong(p);
                }else {
                    PyErr_SetString(PyExc_TypeError,"examples must contain doubles or ints. if masking, use tuples");
                    SVMexcleanup(arg2);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    SVMClassifyP(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg3->nn);
        
        for(i = 0; i < arg3->nn; ++i) {
            q = PyFloat_FromDouble(arg3->v[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg3->v);
        free(arg3);
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg2 != NULL) {
            free((double*) arg2->data);
            free((char*) arg2->masking);
            free((struct SVMExample*) arg2);
        }
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL) {
            free((double*) arg2->data);
            free((char*) arg2->masking);
            free((struct SVMExample*) arg2);
        }
    }
    return NULL;
}


static PyObject *_wrap_SVMClassifyM(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    psvm_model arg1 ;
    struct SVMExample *arg2 ;
    struct SVMOut *arg3 ;
    psvm_model *argp1 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct SVMOut *)malloc(sizeof(struct SVMOut));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:SVMClassifyM",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_psvm_model,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            int j, msize;
            
            msize = PyList_Size(obj1);
            
            arg2 = (struct SVMExample *)malloc(sizeof(struct SVMExample));
            arg2->k = msize;
            arg2->data    = (double *)malloc(sizeof(double)*msize);
            arg2->masking = (char *)malloc(sizeof(char)*msize);
            
            // fetch the attribute values
            for (j = 0; j < msize; ++j) {
                PyObject *p = PyList_GetItem(obj1,j);
                
                arg2->masking[j] = 0;
                if(PyTuple_Check(p)) {
                    arg2->masking[j] = 1;
                    p = PyTuple_GetItem(p,0); // foist value
                }
                if (PyFloat_Check(p)) {
                    arg2->data[j] = PyFloat_AsDouble(p);
                }else if (PyInt_Check(p)) {
                    arg2->data[j] = (double)PyInt_AsLong(p);
                }else {
                    PyErr_SetString(PyExc_TypeError,"examples must contain doubles or ints. if masking, use tuples");
                    SVMexcleanup(arg2);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    SVMClassifyM(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg3->nn);
        
        for(i = 0; i < arg3->nn; ++i) {
            q = PyFloat_FromDouble(arg3->v[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg3->v);
        free(arg3);
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg2 != NULL) {
            free((double*) arg2->data);
            free((char*) arg2->masking);
            free((struct SVMExample*) arg2);
        }
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL) {
            free((double*) arg2->data);
            free((char*) arg2->masking);
            free((struct SVMExample*) arg2);
        }
    }
    return NULL;
}


static PyObject *_wrap_SVMClassifyS(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    psvm_model arg1 ;
    struct SVMSparseExample *arg2 ;
    double result;
    psvm_model *argp1 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:SVMClassifyS",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_psvm_model,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        int nvals, i,j; 
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            nvals = PyList_Size(obj1);
            arg2 = (SVMSparseExample *)malloc(sizeof(SVMSparseExample));
            arg2->nn = nvals;
            arg2->value = (double *)malloc((nvals)*sizeof(double));
            arg2->index = (int *)malloc((nvals)*sizeof(int));
            // fetch the attribute values
            for (j = 0; j < nvals; ++j) {
                PyObject *p = PyList_GetItem(obj1,j);
                if(PyTuple_Check(p)) {
                    PyObject *idx = PyTuple_GetItem(p,0); 
                    PyObject *val = PyTuple_GetItem(p,1); 
                    if (PyInt_Check(idx) || PyLong_Check(idx)) {
                        arg2->index[j] = PyInt_AsLong(idx);
                    }else {
                        PyErr_SetString(PyExc_TypeError,"index not 1 or 0");
                        SVMsecleanup(arg2);
                        return NULL;
                    }
                    if (PyInt_Check(val) || PyLong_Check(val)) {
                        arg2->value[j] = (double)PyInt_AsLong(val);
                    }else if(PyFloat_Check(val)) {
                        arg2->value[j] = PyFloat_AsDouble(val);
                    }else {
                        PyErr_SetString(PyExc_TypeError,"value not an integer or a float");
                        SVMsecleanup(arg2);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"attribute values within an example must be tuples (index,value)");
                    SVMsecleanup(arg2);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"example must be a list of tuples");
            SVMsecleanup(arg2);
            return NULL;
        }
    }
    result = (double)SVMClassifyS(arg1,arg2);
    
    resultobj = PyFloat_FromDouble(result);
    {
        if (arg2 != NULL) {
            free((double*) arg2->value);
            free((int *) arg2->index);
            free((struct SVMSparseExample*) arg2);
        }
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL) {
            free((double*) arg2->value);
            free((int *) arg2->index);
            free((struct SVMSparseExample*) arg2);
        }
    }
    return NULL;
}


static PyObject *_wrap_SVMClassifyPS(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    psvm_model arg1 ;
    struct SVMSparseExample *arg2 ;
    struct SVMOut *arg3 ;
    psvm_model *argp1 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct SVMOut *)malloc(sizeof(struct SVMOut));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:SVMClassifyPS",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_psvm_model,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        int nvals, i,j; 
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            nvals = PyList_Size(obj1);
            arg2 = (SVMSparseExample *)malloc(sizeof(SVMSparseExample));
            arg2->nn = nvals;
            arg2->value = (double *)malloc((nvals)*sizeof(double));
            arg2->index = (int *)malloc((nvals)*sizeof(int));
            // fetch the attribute values
            for (j = 0; j < nvals; ++j) {
                PyObject *p = PyList_GetItem(obj1,j);
                if(PyTuple_Check(p)) {
                    PyObject *idx = PyTuple_GetItem(p,0); 
                    PyObject *val = PyTuple_GetItem(p,1); 
                    if (PyInt_Check(idx) || PyLong_Check(idx)) {
                        arg2->index[j] = PyInt_AsLong(idx);
                    }else {
                        PyErr_SetString(PyExc_TypeError,"index not 1 or 0");
                        SVMsecleanup(arg2);
                        return NULL;
                    }
                    if (PyInt_Check(val) || PyLong_Check(val)) {
                        arg2->value[j] = (double)PyInt_AsLong(val);
                    }else if(PyFloat_Check(val)) {
                        arg2->value[j] = PyFloat_AsDouble(val);
                    }else {
                        PyErr_SetString(PyExc_TypeError,"value not an integer or a float");
                        SVMsecleanup(arg2);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"attribute values within an example must be tuples (index,value)");
                    SVMsecleanup(arg2);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"example must be a list of tuples");
            SVMsecleanup(arg2);
            return NULL;
        }
    }
    SVMClassifyPS(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg3->nn);
        
        for(i = 0; i < arg3->nn; ++i) {
            q = PyFloat_FromDouble(arg3->v[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg3->v);
        free(arg3);
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg2 != NULL) {
            free((double*) arg2->value);
            free((int *) arg2->index);
            free((struct SVMSparseExample*) arg2);
        }
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL) {
            free((double*) arg2->value);
            free((int *) arg2->index);
            free((struct SVMSparseExample*) arg2);
        }
    }
    return NULL;
}


static PyObject *_wrap_SVMClassifyMS(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    psvm_model arg1 ;
    struct SVMSparseExample *arg2 ;
    struct SVMOut *arg3 ;
    psvm_model *argp1 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct SVMOut *)malloc(sizeof(struct SVMOut));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:SVMClassifyMS",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_psvm_model,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        int nvals, i,j; 
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            nvals = PyList_Size(obj1);
            arg2 = (SVMSparseExample *)malloc(sizeof(SVMSparseExample));
            arg2->nn = nvals;
            arg2->value = (double *)malloc((nvals)*sizeof(double));
            arg2->index = (int *)malloc((nvals)*sizeof(int));
            // fetch the attribute values
            for (j = 0; j < nvals; ++j) {
                PyObject *p = PyList_GetItem(obj1,j);
                if(PyTuple_Check(p)) {
                    PyObject *idx = PyTuple_GetItem(p,0); 
                    PyObject *val = PyTuple_GetItem(p,1); 
                    if (PyInt_Check(idx) || PyLong_Check(idx)) {
                        arg2->index[j] = PyInt_AsLong(idx);
                    }else {
                        PyErr_SetString(PyExc_TypeError,"index not 1 or 0");
                        SVMsecleanup(arg2);
                        return NULL;
                    }
                    if (PyInt_Check(val) || PyLong_Check(val)) {
                        arg2->value[j] = (double)PyInt_AsLong(val);
                    }else if(PyFloat_Check(val)) {
                        arg2->value[j] = PyFloat_AsDouble(val);
                    }else {
                        PyErr_SetString(PyExc_TypeError,"value not an integer or a float");
                        SVMsecleanup(arg2);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"attribute values within an example must be tuples (index,value)");
                    SVMsecleanup(arg2);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"example must be a list of tuples");
            SVMsecleanup(arg2);
            return NULL;
        }
    }
    SVMClassifyMS(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg3->nn);
        
        for(i = 0; i < arg3->nn; ++i) {
            q = PyFloat_FromDouble(arg3->v[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg3->v);
        free(arg3);
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg2 != NULL) {
            free((double*) arg2->value);
            free((int *) arg2->index);
            free((struct SVMSparseExample*) arg2);
        }
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL) {
            free((double*) arg2->value);
            free((int *) arg2->index);
            free((struct SVMSparseExample*) arg2);
        }
    }
    return NULL;
}


static PyObject *_wrap_MCluster(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct CInput *arg1 ;
    long arg2 ;
    int arg3 ;
    struct CMInfo *arg4 ;
    PyObject * obj0  = 0 ;
    
    {
        arg1 = NULL;
    }
    {
        arg4 = (struct CMInfo *)malloc(sizeof(struct CMInfo));
    }
    if(!PyArg_ParseTuple(args,(char *)"Oli:MCluster",&obj0,&arg2,&arg3)) goto fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj0)) {
            int i, j, size, msize;
            
            size = PyList_Size(obj0);
            msize = 0;
            
            arg1 = (struct CInput *) malloc(sizeof(struct CInput));
            arg1->data = NULL;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj0,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o);
                    if (arg1->data == NULL) {
                        msize = zsize;
                        arg1->nn = size;
                        arg1->jpp = msize;
                        arg1->data = (double *)malloc(sizeof(double)*zsize*size);
                    }
                    if (zsize == msize) {
                        for (j = 0; j < zsize; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            if (PyFloat_Check(p)) {
                                arg1->data[i+j*size] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[i+j*size] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"sublists must contain doubles");
                                if (arg1->data != NULL)
                                free(arg1->data);
                                free(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"sublists must be of equal size");
                        if (arg1->data != NULL)
                        free(arg1->data);
                        free(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain lists");
                    if (arg1->data != NULL)
                    free(arg1->data);
                    free(arg1);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    MCluster(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *k, *cdisp, *disp, *n, *mapping, *medoids, *ll;
        
        o = PyTuple_New(6);
        
        n = PyInt_FromLong(arg4->n);
        k = PyInt_FromLong(arg4->k);
        disp = PyFloat_FromDouble(arg4->disp);
        
        mapping = PyList_New(arg4->n);
        for (i = 0; i < arg4->n; ++i) {
            ll = PyInt_FromLong(arg4->mapping[i]);
            PyList_SetItem(mapping, i, ll);
        }
        medoids = PyList_New(arg4->k);
        for (i = 0; i < arg4->k; ++i) {
            ll = PyInt_FromLong(arg4->medoids[i]);
            PyList_SetItem(medoids, i, ll);
        }
        cdisp = PyList_New(arg4->k);
        for (i = 0; i < arg4->k; ++i) {
            ll = PyFloat_FromDouble(arg4->cdisp[i]);
            PyList_SetItem(cdisp, i, ll);
        }
        PyTuple_SetItem(o, 0, n);
        PyTuple_SetItem(o, 1, k);
        PyTuple_SetItem(o, 2, mapping);
        PyTuple_SetItem(o, 3, medoids);
        PyTuple_SetItem(o, 4, cdisp);
        PyTuple_SetItem(o, 5, disp);
        free(arg4->medoids);
        free(arg4->cdisp);
        free(arg4->mapping);
        free(arg4);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct CInput*) arg1);
        }
    }
    return resultobj;
    fail:
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct CInput*) arg1);
        }
    }
    return NULL;
}


static PyObject *_wrap_HCluster(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct CInput *arg1 ;
    int arg2 ;
    int arg3 ;
    struct CHInfo *arg4 ;
    PyObject * obj0  = 0 ;
    
    {
        arg1 = NULL;
    }
    {
        arg4 = (struct CHInfo *)malloc(sizeof(struct CHInfo));
    }
    if(!PyArg_ParseTuple(args,(char *)"Oii:HCluster",&obj0,&arg2,&arg3)) goto fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj0)) {
            int i, j, size, msize;
            
            size = PyList_Size(obj0);
            msize = 0;
            
            arg1 = (struct CInput *) malloc(sizeof(struct CInput));
            arg1->data = NULL;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj0,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o);
                    if (arg1->data == NULL) {
                        msize = zsize;
                        arg1->nn = size;
                        arg1->jpp = msize;
                        arg1->data = (double *)malloc(sizeof(double)*zsize*size);
                    }
                    if (zsize == msize) {
                        for (j = 0; j < zsize; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            if (PyFloat_Check(p)) {
                                arg1->data[i+j*size] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[i+j*size] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"sublists must contain doubles");
                                if (arg1->data != NULL)
                                free(arg1->data);
                                free(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"sublists must be of equal size");
                        if (arg1->data != NULL)
                        free(arg1->data);
                        free(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain lists");
                    if (arg1->data != NULL)
                    free(arg1->data);
                    free(arg1);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    HCluster(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *ac, *n, *height, *order, *merging, *ll;
        
        o = PyTuple_New(5);
        n = PyInt_FromLong(arg4->n);
        ac = PyFloat_FromDouble(arg4->ac);
        merging = PyList_New((arg4->n-1)*2);
        for (i = 0; i < (arg4->n-1)*2; ++i) {
            ll = PyInt_FromLong(arg4->merging[i]);
            PyList_SetItem(merging, i, ll);
        }
        order = PyList_New(arg4->n);
        for (i = 0; i < arg4->n; ++i) {
            ll = PyInt_FromLong(arg4->order[i]);
            PyList_SetItem(order, i, ll);
        }
        height = PyList_New(arg4->n-1);
        for (i = 0; i < arg4->n-1; ++i) {
            ll = PyFloat_FromDouble(arg4->height[i+1]);
            PyList_SetItem(height, i, ll);
        }
        PyTuple_SetItem(o, 0, n);
        PyTuple_SetItem(o, 1, merging);
        PyTuple_SetItem(o, 2, order);
        PyTuple_SetItem(o, 3, height);
        PyTuple_SetItem(o, 4, ac);
        
        free(arg4->merging);
        free(arg4->order);
        free(arg4->height);
        free(arg4);
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct CInput*) arg1);
        }
    }
    return resultobj;
    fail:
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct CInput*) arg1);
        }
    }
    return NULL;
}


static PyObject *_wrap_DMCluster(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct DInput *arg1 ;
    long arg2 ;
    struct CMInfo *arg3 ;
    PyObject * obj0  = 0 ;
    
    {
        arg1 = NULL;
    }
    {
        arg3 = (struct CMInfo *)malloc(sizeof(struct CMInfo));
    }
    if(!PyArg_ParseTuple(args,(char *)"Ol:DMCluster",&obj0,&arg2)) goto fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj0)) {
            int i, j, size, offset;
            
            size = PyList_Size(obj0);     /* the number of elements - 1 */
            
            arg1 = (struct DInput *) malloc(sizeof(struct DInput));
            arg1->nn = size+1;
            arg1->data = (double *)malloc((1 + (size * (size + 1))/2)*sizeof(double));
            
            arg1->data[0] = 0.0; // offset for pam and agnes
            //offset = (size * (size + 1))/2;
            offset = 1;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj0,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o); /* the line of a matrix */
                    if (zsize == i+1) {
                        for (j = 0; j < zsize; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            if (PyFloat_Check(p)) {
                                arg1->data[offset++] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[offset++] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"sublists must contain doubles");
                                if (arg1->data != NULL)
                                free(arg1->data);
                                free(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"list must contain the bottom-triangular dissimilarity matrix");
                        if (arg1->data != NULL)
                        free(arg1->data);
                        free(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain lists");
                    if (arg1->data != NULL)
                    free(arg1->data);
                    free(arg1);
                    return NULL;
                }
            }
            //assert(offset == 0);
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    DMCluster(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *k, *cdisp, *disp, *n, *mapping, *medoids, *ll;
        
        o = PyTuple_New(6);
        
        n = PyInt_FromLong(arg3->n);
        k = PyInt_FromLong(arg3->k);
        disp = PyFloat_FromDouble(arg3->disp);
        
        mapping = PyList_New(arg3->n);
        for (i = 0; i < arg3->n; ++i) {
            ll = PyInt_FromLong(arg3->mapping[i]);
            PyList_SetItem(mapping, i, ll);
        }
        medoids = PyList_New(arg3->k);
        for (i = 0; i < arg3->k; ++i) {
            ll = PyInt_FromLong(arg3->medoids[i]);
            PyList_SetItem(medoids, i, ll);
        }
        cdisp = PyList_New(arg3->k);
        for (i = 0; i < arg3->k; ++i) {
            ll = PyFloat_FromDouble(arg3->cdisp[i]);
            PyList_SetItem(cdisp, i, ll);
        }
        PyTuple_SetItem(o, 0, n);
        PyTuple_SetItem(o, 1, k);
        PyTuple_SetItem(o, 2, mapping);
        PyTuple_SetItem(o, 3, medoids);
        PyTuple_SetItem(o, 4, cdisp);
        PyTuple_SetItem(o, 5, disp);
        free(arg3->medoids);
        free(arg3->cdisp);
        free(arg3->mapping);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct DInput*) arg1);
        }
    }
    return resultobj;
    fail:
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct DInput*) arg1);
        }
    }
    return NULL;
}


static PyObject *_wrap_DHCluster(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct DInput *arg1 ;
    int arg2 ;
    struct CHInfo *arg3 ;
    PyObject * obj0  = 0 ;
    
    {
        arg1 = NULL;
    }
    {
        arg3 = (struct CHInfo *)malloc(sizeof(struct CHInfo));
    }
    if(!PyArg_ParseTuple(args,(char *)"Oi:DHCluster",&obj0,&arg2)) goto fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj0)) {
            int i, j, size, offset;
            
            size = PyList_Size(obj0);     /* the number of elements - 1 */
            
            arg1 = (struct DInput *) malloc(sizeof(struct DInput));
            arg1->nn = size+1;
            arg1->data = (double *)malloc((1 + (size * (size + 1))/2)*sizeof(double));
            
            arg1->data[0] = 0.0; // offset for pam and agnes
            //offset = (size * (size + 1))/2;
            offset = 1;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj0,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o); /* the line of a matrix */
                    if (zsize == i+1) {
                        for (j = 0; j < zsize; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            if (PyFloat_Check(p)) {
                                arg1->data[offset++] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[offset++] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"sublists must contain doubles");
                                if (arg1->data != NULL)
                                free(arg1->data);
                                free(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"list must contain the bottom-triangular dissimilarity matrix");
                        if (arg1->data != NULL)
                        free(arg1->data);
                        free(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain lists");
                    if (arg1->data != NULL)
                    free(arg1->data);
                    free(arg1);
                    return NULL;
                }
            }
            //assert(offset == 0);
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    DHCluster(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *ac, *n, *height, *order, *merging, *ll;
        
        o = PyTuple_New(5);
        n = PyInt_FromLong(arg3->n);
        ac = PyFloat_FromDouble(arg3->ac);
        merging = PyList_New((arg3->n-1)*2);
        for (i = 0; i < (arg3->n-1)*2; ++i) {
            ll = PyInt_FromLong(arg3->merging[i]);
            PyList_SetItem(merging, i, ll);
        }
        order = PyList_New(arg3->n);
        for (i = 0; i < arg3->n; ++i) {
            ll = PyInt_FromLong(arg3->order[i]);
            PyList_SetItem(order, i, ll);
        }
        height = PyList_New(arg3->n-1);
        for (i = 0; i < arg3->n-1; ++i) {
            ll = PyFloat_FromDouble(arg3->height[i+1]);
            PyList_SetItem(height, i, ll);
        }
        PyTuple_SetItem(o, 0, n);
        PyTuple_SetItem(o, 1, merging);
        PyTuple_SetItem(o, 2, order);
        PyTuple_SetItem(o, 3, height);
        PyTuple_SetItem(o, 4, ac);
        
        free(arg3->merging);
        free(arg3->order);
        free(arg3->height);
        free(arg3);
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct DInput*) arg1);
        }
    }
    return resultobj;
    fail:
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct DInput*) arg1);
        }
    }
    return NULL;
}


static PyObject *_wrap_FCluster(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct CInput *arg1 ;
    long arg2 ;
    int arg3 ;
    struct CFInfo *arg4 ;
    PyObject * obj0  = 0 ;
    
    {
        arg1 = NULL;
    }
    {
        arg4 = (struct CFInfo *)malloc(sizeof(struct CFInfo));
    }
    if(!PyArg_ParseTuple(args,(char *)"Oli:FCluster",&obj0,&arg2,&arg3)) goto fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj0)) {
            int i, j, size, msize;
            
            size = PyList_Size(obj0);
            msize = 0;
            
            arg1 = (struct CInput *) malloc(sizeof(struct CInput));
            arg1->data = NULL;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj0,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o);
                    if (arg1->data == NULL) {
                        msize = zsize;
                        arg1->nn = size;
                        arg1->jpp = msize;
                        arg1->data = (double *)malloc(sizeof(double)*zsize*size);
                    }
                    if (zsize == msize) {
                        for (j = 0; j < zsize; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            if (PyFloat_Check(p)) {
                                arg1->data[i+j*size] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[i+j*size] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"sublists must contain doubles");
                                if (arg1->data != NULL)
                                free(arg1->data);
                                free(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"sublists must be of equal size");
                        if (arg1->data != NULL)
                        free(arg1->data);
                        free(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain lists");
                    if (arg1->data != NULL)
                    free(arg1->data);
                    free(arg1);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    FCluster(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j,c;
        PyObject *o, *k, *cdisp, *disp, *n, *iterations, *value, *mapping, *membership, *ll, *kk;
        
        o = PyTuple_New(8);
        
        n = PyInt_FromLong(arg4->n);
        k = PyInt_FromLong(arg4->k);
        iterations = PyInt_FromLong(arg4->iterations);
        disp = PyFloat_FromDouble(arg4->disp);
        value = PyFloat_FromDouble(arg4->value);
        
        mapping = PyList_New(arg4->n);
        for (i = 0; i < arg4->n; ++i) {
            ll = PyInt_FromLong(arg4->mapping[i]);
            PyList_SetItem(mapping, i, ll);
        }
        cdisp = PyList_New(arg4->k);
        for (i = 0; i < arg4->k; ++i) {
            ll = PyFloat_FromDouble(arg4->cdisp[i]);
            PyList_SetItem(cdisp, i, ll);
        }
        membership = PyList_New(arg4->k);
        c = 0;
        for (i = 0; i < arg4->k; ++i) {
            kk = PyList_New(arg4->n);
            for (j = 0; j < arg4->n; ++j) {
                ll = PyFloat_FromDouble(arg4->membership[c++]);
                PyList_SetItem(kk, j, ll);
            }
            PyList_SetItem(membership, i, kk);
        }
        PyTuple_SetItem(o, 0, n);
        PyTuple_SetItem(o, 1, k);
        PyTuple_SetItem(o, 2, value);
        PyTuple_SetItem(o, 3, iterations);
        PyTuple_SetItem(o, 4, membership);
        PyTuple_SetItem(o, 5, mapping);
        PyTuple_SetItem(o, 6, cdisp);
        PyTuple_SetItem(o, 7, disp);
        free(arg4->membership);
        free(arg4->cdisp);
        free(arg4->mapping);
        free(arg4);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct CInput*) arg1);
        }
    }
    return resultobj;
    fail:
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct CInput*) arg1);
        }
    }
    return NULL;
}


static PyObject *_wrap_DFCluster(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct DInput *arg1 ;
    long arg2 ;
    struct CFInfo *arg3 ;
    PyObject * obj0  = 0 ;
    
    {
        arg1 = NULL;
    }
    {
        arg3 = (struct CFInfo *)malloc(sizeof(struct CFInfo));
    }
    if(!PyArg_ParseTuple(args,(char *)"Ol:DFCluster",&obj0,&arg2)) goto fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj0)) {
            int i, j, size, offset;
            
            size = PyList_Size(obj0);     /* the number of elements - 1 */
            
            arg1 = (struct DInput *) malloc(sizeof(struct DInput));
            arg1->nn = size+1;
            arg1->data = (double *)malloc((1 + (size * (size + 1))/2)*sizeof(double));
            
            arg1->data[0] = 0.0; // offset for pam and agnes
            //offset = (size * (size + 1))/2;
            offset = 1;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj0,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o); /* the line of a matrix */
                    if (zsize == i+1) {
                        for (j = 0; j < zsize; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            if (PyFloat_Check(p)) {
                                arg1->data[offset++] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[offset++] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"sublists must contain doubles");
                                if (arg1->data != NULL)
                                free(arg1->data);
                                free(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"list must contain the bottom-triangular dissimilarity matrix");
                        if (arg1->data != NULL)
                        free(arg1->data);
                        free(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain lists");
                    if (arg1->data != NULL)
                    free(arg1->data);
                    free(arg1);
                    return NULL;
                }
            }
            //assert(offset == 0);
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    DFCluster(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j,c;
        PyObject *o, *k, *cdisp, *disp, *n, *iterations, *value, *mapping, *membership, *ll, *kk;
        
        o = PyTuple_New(8);
        
        n = PyInt_FromLong(arg3->n);
        k = PyInt_FromLong(arg3->k);
        iterations = PyInt_FromLong(arg3->iterations);
        disp = PyFloat_FromDouble(arg3->disp);
        value = PyFloat_FromDouble(arg3->value);
        
        mapping = PyList_New(arg3->n);
        for (i = 0; i < arg3->n; ++i) {
            ll = PyInt_FromLong(arg3->mapping[i]);
            PyList_SetItem(mapping, i, ll);
        }
        cdisp = PyList_New(arg3->k);
        for (i = 0; i < arg3->k; ++i) {
            ll = PyFloat_FromDouble(arg3->cdisp[i]);
            PyList_SetItem(cdisp, i, ll);
        }
        membership = PyList_New(arg3->k);
        c = 0;
        for (i = 0; i < arg3->k; ++i) {
            kk = PyList_New(arg3->n);
            for (j = 0; j < arg3->n; ++j) {
                ll = PyFloat_FromDouble(arg3->membership[c++]);
                PyList_SetItem(kk, j, ll);
            }
            PyList_SetItem(membership, i, kk);
        }
        PyTuple_SetItem(o, 0, n);
        PyTuple_SetItem(o, 1, k);
        PyTuple_SetItem(o, 2, value);
        PyTuple_SetItem(o, 3, iterations);
        PyTuple_SetItem(o, 4, membership);
        PyTuple_SetItem(o, 5, mapping);
        PyTuple_SetItem(o, 6, cdisp);
        PyTuple_SetItem(o, 7, disp);
        free(arg3->membership);
        free(arg3->cdisp);
        free(arg3->mapping);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct DInput*) arg1);
        }
    }
    return resultobj;
    fail:
    {
        if (arg1 != NULL) {
            free((double*) arg1->data);
            free((struct DInput*) arg1);
        }
    }
    return NULL;
}


static PyObject *_wrap_LogReg(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct LRInput *arg1 ;
    double arg2 ;
    struct LRInfo *arg3 ;
    PyObject * obj0  = 0 ;
    
    {
        arg1 = NULL;
    }
    {
        arg3 = (struct LRInfo *)malloc(sizeof(struct LRInfo));
    }
    if(!PyArg_ParseTuple(args,(char *)"Od:LogReg",&obj0,&arg2)) goto fail;
    {
        /* Check if is a list */
        // printf("A-");
        if (PyList_Check(obj0)) {
            int i, j, size, msize;
            
            size = PyList_Size(obj0);
            msize = 0;
            //printf("lr:-1\n");
            arg1 = (struct LRInput *) malloc(sizeof(struct LRInput));
            arg1->data = NULL;
            arg1->success = NULL;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj0,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o);
                    if (arg1->data == NULL) {
                        msize = zsize;
                        arg1->nn = size;
                        arg1->k = msize-1; // size correction, last is class
                        arg1->data = (double **)malloc(sizeof(double *)*(size+1));
                        for (j = 0; j <= size; ++j) {
                            arg1->data[j] = (double *)malloc(sizeof(double)*(arg1->k+1));
                        }
                        arg1->success = (double *)malloc(sizeof(double)*(arg1->nn+1));
                        arg1->trials = (double *)malloc(sizeof(double)*(arg1->nn+1));
                    }
                    if (zsize == msize) {
                        // fetch the class (must be either binary or a tuple)
                        PyObject *p = PyList_GetItem(o,zsize-1);
                        if (p == NULL) {
                            PyErr_SetString(PyExc_TypeError,"cannot fetch example");
                            LRcleanup(arg1);
                            return NULL;
                        }
                        
                        // the way of storing the class value is either simple scalar 
                        // probability, or tuple (probability, weight)
                        
                        // set the default value for # trials
                        arg1->trials[i+1] = 1.0;
                        if(PyTuple_Check(p)) {
                            PyObject *ps = PyTuple_GetItem(p,1); // get # trials
                            if (PyInt_Check(ps) || PyLong_Check(ps)) {
                                arg1->trials[i+1] = (double)PyInt_AsLong(ps);
                            }else if(PyFloat_Check(ps)) {
                                arg1->trials[i+1] = PyFloat_AsDouble(ps);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"number of trials is not float or int");
                                LRcleanup(arg1);
                                return NULL;
                            }
                            p = PyTuple_GetItem(p,0); // foist a value for successes
                        }
                        
                        if (PyInt_Check(p) || PyLong_Check(p)) {
                            arg1->success[i+1] = arg1->trials[i+1]*(double)PyInt_AsLong(p);
                        }else if(PyFloat_Check(p)) {
                            arg1->success[i+1] = arg1->trials[i+1]*PyFloat_AsDouble(p);
                        }else {
                            PyErr_SetString(PyExc_TypeError,"experiment success is not float or int");
                            LRcleanup(arg1);
                            return NULL;
                        }
                        
                        // fetch the attribute values
                        for (j = 0; j < zsize-1; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            if (PyFloat_Check(p)) {
                                // correct +1 because that array starts at 1
                                arg1->data[i+1][j+1] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[i+1][j+1] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"examples must contain doubles or ints");
                                LRcleanup(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"examples must be of equal size");
                        LRcleanup(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"example table must contain examples as lists");
                    LRcleanup(arg1);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
        //  printf("-A");
        //printf("lr:-2\n");
    }
    LogReg(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j;
        PyObject *o, *chisq, *devnce, *ndf, *beta, *se_beta, *fit, *covbeta, *deps; 
        PyObject *error, *stdres, *ll, *kk;
        //		printf("X+");
        //		printf("lr:+1\n");
        o = PyTuple_New(10);
        chisq = PyFloat_FromDouble(arg3->chisq);
        devnce= PyFloat_FromDouble(arg3->devnce);
        ndf = PyInt_FromLong(arg3->ndf);
        error = PyInt_FromLong(arg3->error);
        beta = PyList_New(arg3->k+1);
        for (i = 0; i <= arg3->k; ++i) {
            ll = PyFloat_FromDouble(arg3->beta[i]);
            PyList_SetItem(beta, i, ll);
        }
        se_beta = PyList_New(arg3->k+1);
        for (i = 0; i <= arg3->k; ++i) {
            ll = PyFloat_FromDouble(arg3->se_beta[i]);
            PyList_SetItem(se_beta, i, ll);
        }
        fit = PyList_New(arg3->nn);
        for (i = 1; i <= arg3->nn; ++i) {
            ll = PyFloat_FromDouble(arg3->fit[i]);
            PyList_SetItem(fit, i-1, ll);
        }
        stdres = PyList_New(arg3->nn);
        for (i = 1; i <= arg3->nn; ++i) {
            ll = PyFloat_FromDouble(arg3->stdres[i]);
            PyList_SetItem(stdres, i-1, ll);
        }
        covbeta = PyList_New(arg3->k+1);
        for (i = 0; i <= arg3->k; ++i) {
            kk =  PyList_New(arg3->k+1);
            for(j = 0; j <= arg3->k; ++j) {
                ll = PyFloat_FromDouble(arg3->cov_beta[i][j]);
                PyList_SetItem(kk, j, ll);
            }
            PyList_SetItem(covbeta, i, kk);
        }
        deps = PyList_New(arg3->k);
        for (i = 1; i <= arg3->k; ++i) {
            ll = PyInt_FromLong(arg3->dependent[i]);
            PyList_SetItem(deps, i-1, ll);
        }
        
        PyTuple_SetItem(o, 0, chisq);
        PyTuple_SetItem(o, 1, devnce);
        PyTuple_SetItem(o, 2, ndf);
        PyTuple_SetItem(o, 3, beta);
        PyTuple_SetItem(o, 4, se_beta);
        PyTuple_SetItem(o, 5, fit);
        PyTuple_SetItem(o, 6, covbeta);
        PyTuple_SetItem(o, 7, stdres);
        PyTuple_SetItem(o, 8, error);
        PyTuple_SetItem(o, 9, deps);
        
        LRInfoCleanup(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
        //	   printf("lr:+2\n");
        //		printf("-X");
    }
    {
        if(arg1 != NULL) {
            int i;
            for (i = 0; i <= arg1->nn; ++i)
            free((double*)arg1->data[i]);
            free((double**) arg1->data);
            free((double*) arg1->success);
            free((double*) arg1->trials);
            free((struct LRInput*) arg1);
        }
    }
    return resultobj;
    fail:
    {
        if(arg1 != NULL) {
            int i;
            for (i = 0; i <= arg1->nn; ++i)
            free((double*)arg1->data[i]);
            free((double**) arg1->data);
            free((double*) arg1->success);
            free((double*) arg1->trials);
            free((struct LRInput*) arg1);
        }
    }
    return NULL;
}


static PyObject *_wrap_Computer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct XX *arg1 ;
    struct XX *arg2 ;
    PyObject * obj0  = 0 ;
    
    {
        arg1 = NULL;
    }
    {
        arg2 = NULL;
    }
    {
        arg2 = (struct XX *)malloc(sizeof(struct XX));
    }
    if(!PyArg_ParseTuple(args,(char *)"O:Computer",&obj0)) goto fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj0)) {
            int i, j, size, msize;
            
            size = PyList_Size(obj0);
            msize = 0;
            
            arg1 = (struct XX*) malloc(sizeof(struct XX));
            arg1->data = NULL;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj0,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o);
                    if (arg1->data == NULL) {
                        msize = zsize;
                        arg1->nn = size;
                        arg1->k = msize;
                        arg1->data = (double **)malloc(sizeof(double *)*size);
                        for(j = 0; j < size; ++j) {
                            arg1->data[j] = (double *)malloc(sizeof(double)*msize);
                        }
                        
                    }
                    if (zsize == msize) {
                        for (j = 0; j < zsize; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            if (PyFloat_Check(p)) {
                                arg1->data[i][j] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[i][j] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"sublists must contain doubles");
                                if (arg1->data != NULL) {
                                    for(j = 0; j < size; ++j) {
                                        free(arg1->data[j]);
                                    }
                                    free(arg1->data);
                                }
                                free(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"sublists must be of equal size");
                        if (arg1->data != NULL) {
                            for(j = 0; j < size; ++j) {
                                free(arg1->data[j]);
                            }
                            free(arg1->data);
                        }
                        free(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain lists");
                    if (arg1->data != NULL) {
                        for(j = 0; j < size; ++j) {
                            free(arg1->data[j]);
                        }
                        free(arg1->data);
                    }
                    free(arg1);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    Computer(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j;
        PyObject *o, *p, *q;
        
        o = PyList_New(arg2->nn);
        
        for(i = 0; i < arg2->nn; ++i) {
            p = PyList_New(arg2->k);
            for(j = 0; j < arg2->k; ++j) {
                q = PyFloat_FromDouble(arg2->data[i][j]);
                PyList_SetItem(p, j, q);
            }
            PyList_SetItem(o, i, p);
        }
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        int i;
        if(arg1->data != NULL) {
            for (i = 0; i < arg1->nn; ++i) {
                free(arg1->data[i]);
            }
            free(arg1->data);
        }
        free(arg1);
    }
    {
        int i;
        if(arg2->data != NULL) {
            for (i = 0; i < arg2->nn; ++i) {
                free(arg2->data[i]);
            }
            free(arg2->data);
        }
        free(arg2);
    }
    return resultobj;
    fail:
    {
        int i;
        if(arg1->data != NULL) {
            for (i = 0; i < arg1->nn; ++i) {
                free(arg1->data[i]);
            }
            free(arg1->data);
        }
        free(arg1);
    }
    {
        int i;
        if(arg2->data != NULL) {
            for (i = 0; i < arg2->nn; ++i) {
                free(arg2->data[i]);
            }
            free(arg2->data);
        }
        free(arg2);
    }
    return NULL;
}


static PyObject *_wrap_NBprepare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInput *arg1 ;
    struct NBInfo *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NBprepare",&obj0)) goto fail;
    {
        int i, j, size, msize;
        PyObject *arr,*cvl,*cards,*alpha;
        /* Check if is a list */
        
        arr = PyTuple_GetItem(obj0,0);
        if (PyList_Check(arr)) {
            size = PyList_Size(arr);
            msize = 0;
            //printf("lr:-1\n");
            arg1 = (struct NBInput *) malloc(sizeof(struct NBInput));
            arg1->data = NULL;
            arg1->l = NULL;
            arg1->card = NULL;
            arg1->cvi = NULL;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(arr,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o);
                    if (arg1->data == NULL) {
                        msize = zsize;
                        arg1->nn = size;
                        arg1->k = msize;
                        arg1->na = arg1->k-1; // number of attributes
                        arg1->data = (int **)malloc(sizeof(int *)*(size));
                        for (j = 0; j < size; ++j) {
                            arg1->data[j] = (int *)malloc(sizeof(int)*(arg1->k));
                        }
                        arg1->l = (int *)malloc(sizeof(int)*(arg1->nn));
                        arg1->cvi = (int *)malloc(sizeof(int)*(arg1->nn));
                        arg1->card = (int *)malloc(sizeof(int)*(arg1->k));
                    }
                    if (zsize == msize) {
                        // fetch the attribute values
                        for (j = 0; j < arg1->k; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            if (PyFloat_Check(p)) {
                                // correct +1 because that array starts at 1
                                arg1->data[i][j] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[i][j] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"examples must contain doubles or ints");
                                NBcleanup(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"examples must be of equal size");
                        NBcleanup(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"example table must contain examples as lists");
                    NBcleanup(arg1);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #0 not a list");
            return NULL;
        }
        
        
        // fetch the cardinalities
        cards = PyTuple_GetItem(obj0,1);
        if (!PyList_Check(cards) && PyList_Size(cards) != arg1->k) {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not an attribute cardinality list");
            return NULL;
        }
        
        for (j = 0; j < arg1->k; ++j) {
            PyObject *p = PyList_GetItem(cards,j);
            if (PyFloat_Check(p)) {
                // correct +1 because that array starts at 1
                arg1->card[j] = PyFloat_AsDouble(p);
            }else if (PyInt_Check(p)) {
                arg1->card[j] = PyInt_AsLong(p);
            }else {
                PyErr_SetString(PyExc_TypeError,"card list must contain doubles or ints");
                NBcleanup(arg1);
                return NULL;
            }
        }
        
        // fetch the cvl 
        cvl = PyTuple_GetItem(obj0,2);
        if (!PyList_Check(cvl) && PyList_Size(cvl) != arg1->nn) {
            PyErr_SetString(PyExc_TypeError,"tuple element #2 not a CVI list");
            return NULL;
        }
        
        arg1->maxcvi = 0;
        for (j = 0; j < arg1->nn; ++j) {
            PyObject *p = PyList_GetItem(cvl,j);
            if (PyFloat_Check(p)) {
                // correct +1 because that array starts at 1
                arg1->cvi[j] = PyFloat_AsDouble(p);
            }else if (PyInt_Check(p)) {
                arg1->cvi[j] = PyInt_AsLong(p);
            }else {
                PyErr_SetString(PyExc_TypeError,"cvl must contain doubles or ints");
                NBcleanup(arg1);
                return NULL;
            }
            if(arg1->maxcvi < arg1->cvi[j])
            arg1->maxcvi = arg1->cvi[j];
        }
        
        alpha = PyTuple_GetItem(obj0,3);
        if (PyFloat_Check(alpha)) {
            arg1->a = PyFloat_AsDouble(alpha);
        }else if (PyInt_Check(alpha)) {
            arg1->a = PyInt_AsLong(alpha);
        }else {
            arg1->a = 1.0; // default smoothing
        }
    }
    result = (struct NBInfo *)NBprepare(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_NBInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBkill(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NBkill",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    NBkill(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBcleanup(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInput *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NBcleanup",&obj0)) goto fail;
    {
        int i, j, size, msize;
        PyObject *arr,*cvl,*cards,*alpha;
        /* Check if is a list */
        
        arr = PyTuple_GetItem(obj0,0);
        if (PyList_Check(arr)) {
            size = PyList_Size(arr);
            msize = 0;
            //printf("lr:-1\n");
            arg1 = (struct NBInput *) malloc(sizeof(struct NBInput));
            arg1->data = NULL;
            arg1->l = NULL;
            arg1->card = NULL;
            arg1->cvi = NULL;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(arr,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o);
                    if (arg1->data == NULL) {
                        msize = zsize;
                        arg1->nn = size;
                        arg1->k = msize;
                        arg1->na = arg1->k-1; // number of attributes
                        arg1->data = (int **)malloc(sizeof(int *)*(size));
                        for (j = 0; j < size; ++j) {
                            arg1->data[j] = (int *)malloc(sizeof(int)*(arg1->k));
                        }
                        arg1->l = (int *)malloc(sizeof(int)*(arg1->nn));
                        arg1->cvi = (int *)malloc(sizeof(int)*(arg1->nn));
                        arg1->card = (int *)malloc(sizeof(int)*(arg1->k));
                    }
                    if (zsize == msize) {
                        // fetch the attribute values
                        for (j = 0; j < arg1->k; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            if (PyFloat_Check(p)) {
                                // correct +1 because that array starts at 1
                                arg1->data[i][j] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[i][j] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"examples must contain doubles or ints");
                                NBcleanup(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"examples must be of equal size");
                        NBcleanup(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"example table must contain examples as lists");
                    NBcleanup(arg1);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #0 not a list");
            return NULL;
        }
        
        
        // fetch the cardinalities
        cards = PyTuple_GetItem(obj0,1);
        if (!PyList_Check(cards) && PyList_Size(cards) != arg1->k) {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not an attribute cardinality list");
            return NULL;
        }
        
        for (j = 0; j < arg1->k; ++j) {
            PyObject *p = PyList_GetItem(cards,j);
            if (PyFloat_Check(p)) {
                // correct +1 because that array starts at 1
                arg1->card[j] = PyFloat_AsDouble(p);
            }else if (PyInt_Check(p)) {
                arg1->card[j] = PyInt_AsLong(p);
            }else {
                PyErr_SetString(PyExc_TypeError,"card list must contain doubles or ints");
                NBcleanup(arg1);
                return NULL;
            }
        }
        
        // fetch the cvl 
        cvl = PyTuple_GetItem(obj0,2);
        if (!PyList_Check(cvl) && PyList_Size(cvl) != arg1->nn) {
            PyErr_SetString(PyExc_TypeError,"tuple element #2 not a CVI list");
            return NULL;
        }
        
        arg1->maxcvi = 0;
        for (j = 0; j < arg1->nn; ++j) {
            PyObject *p = PyList_GetItem(cvl,j);
            if (PyFloat_Check(p)) {
                // correct +1 because that array starts at 1
                arg1->cvi[j] = PyFloat_AsDouble(p);
            }else if (PyInt_Check(p)) {
                arg1->cvi[j] = PyInt_AsLong(p);
            }else {
                PyErr_SetString(PyExc_TypeError,"cvl must contain doubles or ints");
                NBcleanup(arg1);
                return NULL;
            }
            if(arg1->maxcvi < arg1->cvi[j])
            arg1->maxcvi = arg1->cvi[j];
        }
        
        alpha = PyTuple_GetItem(obj0,3);
        if (PyFloat_Check(alpha)) {
            arg1->a = PyFloat_AsDouble(alpha);
        }else if (PyInt_Check(alpha)) {
            arg1->a = PyInt_AsLong(alpha);
        }else {
            arg1->a = 1.0; // default smoothing
        }
    }
    NBcleanup(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBquality(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    struct NBModel *arg2 ;
    struct NBResult *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct NBResult *)malloc(sizeof(struct NBResult));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:NBquality",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyObject *p, *sing, *grup;
        
        arg2 = (struct NBModel *) malloc(sizeof(struct NBInput));
        arg2->nosingles = 0;
        arg2->singles = NULL;
        arg2->nogroups = 0;
        arg2->groups = NULL;
        
        sing = PyTuple_GetItem(obj1,0);
        if (PyList_Check(sing)) {
            int i;
            
            arg2->nosingles = PyList_Size(sing);
            if(arg2->nosingles > 0) {
                arg2->singles = (int *)malloc(sizeof(int)*arg2->nosingles);
                for (i = 0; i < arg2->nosingles; i++) {
                    arg2->singles[i] = PyInt_AsLong(PyList_GetItem(sing,i));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #0 not a list of singles");
            return NULL;
        }
        
        grup = PyTuple_GetItem(obj1,1);
        if (PyList_Check(grup)) {
            int i, j, msize;
            
            arg2->nogroups = PyList_Size(grup);
            if(arg2->nogroups > 0) {
                arg2->groups = (struct NBGroup *)malloc(sizeof(struct NBGroup)*arg2->nogroups);
                for (i = 0; i < arg2->nogroups; i++) {
                    PyObject *o = PyList_GetItem(grup,i);
                    msize = PyList_Size(o);
                    arg2->groups[i].n = msize;
                    arg2->groups[i].l = (int *)malloc(sizeof(int)*msize);
                    for (j = 0; j < msize; ++j)
                    arg2->groups[i].l[j] = PyInt_AsLong(PyList_GetItem(o,j));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not a list of groups");
            return NULL;
        }
    }
    NBquality(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j,c;
        PyObject *o, *err, *q;
        
        o = PyTuple_New(6);
        
        q = PyFloat_FromDouble(arg3->kl_q);
        err = PyFloat_FromDouble(arg3->kl_err);
        
        PyTuple_SetItem(o, 0, q);
        PyTuple_SetItem(o, 1, err);
        
        q = PyFloat_FromDouble(arg3->b_q);
        err = PyFloat_FromDouble(arg3->b_err);
        
        PyTuple_SetItem(o, 2, q);
        PyTuple_SetItem(o, 3, err);
        
        q = PyFloat_FromDouble(arg3->er_q);
        err = PyFloat_FromDouble(arg3->er_err);
        
        PyTuple_SetItem(o, 4, q);
        PyTuple_SetItem(o, 5, err);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        int i;
        if(arg2->singles != NULL)
        free(arg2->singles);
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return resultobj;
    fail:
    {
        int i;
        if(arg2->singles != NULL)
        free(arg2->singles);
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return NULL;
}


static PyObject *_wrap_TANquality(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    struct NBModel *arg2 ;
    struct NBResult *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct NBResult *)malloc(sizeof(struct NBResult));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:TANquality",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyObject *p, *sing, *grup;
        
        arg2 = (struct NBModel *) malloc(sizeof(struct NBInput));
        arg2->nosingles = 0;
        arg2->singles = NULL;
        arg2->nogroups = 0;
        arg2->groups = NULL;
        
        sing = PyTuple_GetItem(obj1,0);
        if (PyList_Check(sing)) {
            int i;
            
            arg2->nosingles = PyList_Size(sing);
            if(arg2->nosingles > 0) {
                arg2->singles = (int *)malloc(sizeof(int)*arg2->nosingles);
                for (i = 0; i < arg2->nosingles; i++) {
                    arg2->singles[i] = PyInt_AsLong(PyList_GetItem(sing,i));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #0 not a list of singles");
            return NULL;
        }
        
        grup = PyTuple_GetItem(obj1,1);
        if (PyList_Check(grup)) {
            int i, j, msize;
            
            arg2->nogroups = PyList_Size(grup);
            if(arg2->nogroups > 0) {
                arg2->groups = (struct NBGroup *)malloc(sizeof(struct NBGroup)*arg2->nogroups);
                for (i = 0; i < arg2->nogroups; i++) {
                    PyObject *o = PyList_GetItem(grup,i);
                    msize = PyList_Size(o);
                    arg2->groups[i].n = msize;
                    arg2->groups[i].l = (int *)malloc(sizeof(int)*msize);
                    for (j = 0; j < msize; ++j)
                    arg2->groups[i].l[j] = PyInt_AsLong(PyList_GetItem(o,j));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not a list of groups");
            return NULL;
        }
    }
    TANquality(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j,c;
        PyObject *o, *err, *q;
        
        o = PyTuple_New(6);
        
        q = PyFloat_FromDouble(arg3->kl_q);
        err = PyFloat_FromDouble(arg3->kl_err);
        
        PyTuple_SetItem(o, 0, q);
        PyTuple_SetItem(o, 1, err);
        
        q = PyFloat_FromDouble(arg3->b_q);
        err = PyFloat_FromDouble(arg3->b_err);
        
        PyTuple_SetItem(o, 2, q);
        PyTuple_SetItem(o, 3, err);
        
        q = PyFloat_FromDouble(arg3->er_q);
        err = PyFloat_FromDouble(arg3->er_err);
        
        PyTuple_SetItem(o, 4, q);
        PyTuple_SetItem(o, 5, err);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        int i;
        if(arg2->singles != NULL)
        free(arg2->singles);
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return resultobj;
    fail:
    {
        int i;
        if(arg2->singles != NULL)
        free(arg2->singles);
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return NULL;
}


static PyObject *_wrap_NBdivergence(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    struct NBModel *arg2 ;
    struct NBResult *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct NBResult *)malloc(sizeof(struct NBResult));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:NBdivergence",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyObject *p, *sing, *grup;
        
        arg2 = (struct NBModel *) malloc(sizeof(struct NBInput));
        arg2->nosingles = 0;
        arg2->singles = NULL;
        arg2->nogroups = 0;
        arg2->groups = NULL;
        
        sing = PyTuple_GetItem(obj1,0);
        if (PyList_Check(sing)) {
            int i;
            
            arg2->nosingles = PyList_Size(sing);
            if(arg2->nosingles > 0) {
                arg2->singles = (int *)malloc(sizeof(int)*arg2->nosingles);
                for (i = 0; i < arg2->nosingles; i++) {
                    arg2->singles[i] = PyInt_AsLong(PyList_GetItem(sing,i));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #0 not a list of singles");
            return NULL;
        }
        
        grup = PyTuple_GetItem(obj1,1);
        if (PyList_Check(grup)) {
            int i, j, msize;
            
            arg2->nogroups = PyList_Size(grup);
            if(arg2->nogroups > 0) {
                arg2->groups = (struct NBGroup *)malloc(sizeof(struct NBGroup)*arg2->nogroups);
                for (i = 0; i < arg2->nogroups; i++) {
                    PyObject *o = PyList_GetItem(grup,i);
                    msize = PyList_Size(o);
                    arg2->groups[i].n = msize;
                    arg2->groups[i].l = (int *)malloc(sizeof(int)*msize);
                    for (j = 0; j < msize; ++j)
                    arg2->groups[i].l[j] = PyInt_AsLong(PyList_GetItem(o,j));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not a list of groups");
            return NULL;
        }
    }
    NBdivergence(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j,c;
        PyObject *o, *err, *q;
        
        o = PyTuple_New(6);
        
        q = PyFloat_FromDouble(arg3->kl_q);
        err = PyFloat_FromDouble(arg3->kl_err);
        
        PyTuple_SetItem(o, 0, q);
        PyTuple_SetItem(o, 1, err);
        
        q = PyFloat_FromDouble(arg3->b_q);
        err = PyFloat_FromDouble(arg3->b_err);
        
        PyTuple_SetItem(o, 2, q);
        PyTuple_SetItem(o, 3, err);
        
        q = PyFloat_FromDouble(arg3->er_q);
        err = PyFloat_FromDouble(arg3->er_err);
        
        PyTuple_SetItem(o, 4, q);
        PyTuple_SetItem(o, 5, err);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        int i;
        if(arg2->singles != NULL)
        free(arg2->singles);
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return resultobj;
    fail:
    {
        int i;
        if(arg2->singles != NULL)
        free(arg2->singles);
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return NULL;
}


static PyObject *_wrap_NBqualityW(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    double *arg2 ;
    struct NBModel *arg3 ;
    struct NBResult *arg4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = NULL;
    }
    {
        arg4 = (struct NBResult *)malloc(sizeof(struct NBResult));
    }
    if(!PyArg_ParseTuple(args,(char *)"OOO:NBqualityW",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);
            int i = 0;
            arg2 = (double *) malloc((1+size)*sizeof(double));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj1,i);
                if (PyFloat_Check(o))
                arg2[i] = PyFloat_AsDouble(PyList_GetItem(obj1,i));
                else if (PyInt_Check(o)) {
                    arg2[i] = PyInt_AsLong(PyList_GetItem(obj1,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg2);
                    return NULL;
                }
            }
            arg2[i] = 3.1459001;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    {
        PyObject *p, *sing, *grup;
        
        arg3 = (struct NBModel *) malloc(sizeof(struct NBInput));
        arg3->nosingles = 0;
        arg3->singles = NULL;
        arg3->nogroups = 0;
        arg3->groups = NULL;
        
        sing = PyTuple_GetItem(obj2,0);
        if (PyList_Check(sing)) {
            int i;
            
            arg3->nosingles = PyList_Size(sing);
            if(arg3->nosingles > 0) {
                arg3->singles = (int *)malloc(sizeof(int)*arg3->nosingles);
                for (i = 0; i < arg3->nosingles; i++) {
                    arg3->singles[i] = PyInt_AsLong(PyList_GetItem(sing,i));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #0 not a list of singles");
            return NULL;
        }
        
        grup = PyTuple_GetItem(obj2,1);
        if (PyList_Check(grup)) {
            int i, j, msize;
            
            arg3->nogroups = PyList_Size(grup);
            if(arg3->nogroups > 0) {
                arg3->groups = (struct NBGroup *)malloc(sizeof(struct NBGroup)*arg3->nogroups);
                for (i = 0; i < arg3->nogroups; i++) {
                    PyObject *o = PyList_GetItem(grup,i);
                    msize = PyList_Size(o);
                    arg3->groups[i].n = msize;
                    arg3->groups[i].l = (int *)malloc(sizeof(int)*msize);
                    for (j = 0; j < msize; ++j)
                    arg3->groups[i].l[j] = PyInt_AsLong(PyList_GetItem(o,j));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not a list of groups");
            return NULL;
        }
    }
    NBqualityW(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j,c;
        PyObject *o, *err, *q;
        
        o = PyTuple_New(6);
        
        q = PyFloat_FromDouble(arg4->kl_q);
        err = PyFloat_FromDouble(arg4->kl_err);
        
        PyTuple_SetItem(o, 0, q);
        PyTuple_SetItem(o, 1, err);
        
        q = PyFloat_FromDouble(arg4->b_q);
        err = PyFloat_FromDouble(arg4->b_err);
        
        PyTuple_SetItem(o, 2, q);
        PyTuple_SetItem(o, 3, err);
        
        q = PyFloat_FromDouble(arg4->er_q);
        err = PyFloat_FromDouble(arg4->er_err);
        
        PyTuple_SetItem(o, 4, q);
        PyTuple_SetItem(o, 5, err);
        free(arg4);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg2 != NULL)
        free((double *) arg2);
    }
    {
        int i;
        if(arg3->singles != NULL)
        free(arg3->singles);
        if(arg3->groups != NULL) {
            for (i = 0; i < arg3->nogroups; ++i) {
                free(arg3->groups[i].l);
            }
            free(arg3->groups);
        }
        free(arg3);
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL)
        free((double *) arg2);
    }
    {
        int i;
        if(arg3->singles != NULL)
        free(arg3->singles);
        if(arg3->groups != NULL) {
            for (i = 0; i < arg3->nogroups; ++i) {
                free(arg3->groups[i].l);
            }
            free(arg3->groups);
        }
        free(arg3);
    }
    return NULL;
}


static PyObject *_wrap_NBsaveScores(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NBsaveScores",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    NBsaveScores(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBrememberScores(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NBrememberScores",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    NBrememberScores(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBcompareScores(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    struct NBResult *arg2 ;
    PyObject * obj0  = 0 ;
    
    {
        arg2 = (struct NBResult *)malloc(sizeof(struct NBResult));
    }
    if(!PyArg_ParseTuple(args,(char *)"O:NBcompareScores",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    NBcompareScores(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j,c;
        PyObject *o, *err, *q;
        
        o = PyTuple_New(6);
        
        q = PyFloat_FromDouble(arg2->kl_q);
        err = PyFloat_FromDouble(arg2->kl_err);
        
        PyTuple_SetItem(o, 0, q);
        PyTuple_SetItem(o, 1, err);
        
        q = PyFloat_FromDouble(arg2->b_q);
        err = PyFloat_FromDouble(arg2->b_err);
        
        PyTuple_SetItem(o, 2, q);
        PyTuple_SetItem(o, 3, err);
        
        q = PyFloat_FromDouble(arg2->er_q);
        err = PyFloat_FromDouble(arg2->er_err);
        
        PyTuple_SetItem(o, 4, q);
        PyTuple_SetItem(o, 5, err);
        free(arg2);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBexportScores(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    int arg2 ;
    struct NBList *arg3 ;
    PyObject * obj0  = 0 ;
    
    {
        arg3 = (struct NBList *)malloc(sizeof(struct NBList));
    }
    if(!PyArg_ParseTuple(args,(char *)"Oi:NBexportScores",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    NBexportScores(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg3->n);
        
        for(i = 0; i < arg3->n; ++i) {
            q = PyFloat_FromDouble(arg3->l[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg3->l);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBexportProbabilities(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    int arg2 ;
    struct NBList *arg3 ;
    PyObject * obj0  = 0 ;
    
    {
        arg3 = (struct NBList *)malloc(sizeof(struct NBList));
    }
    if(!PyArg_ParseTuple(args,(char *)"Oi:NBexportProbabilities",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    NBexportProbabilities(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg3->n);
        
        for(i = 0; i < arg3->n; ++i) {
            q = PyFloat_FromDouble(arg3->l[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg3->l);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBcompareLists(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    double *arg2 ;
    double *arg3 ;
    double result;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = NULL;
    }
    if(!PyArg_ParseTuple(args,(char *)"iOO:NBcompareLists",&arg1,&obj1,&obj2)) goto fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);
            int i = 0;
            arg2 = (double *) malloc((1+size)*sizeof(double));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj1,i);
                if (PyFloat_Check(o))
                arg2[i] = PyFloat_AsDouble(PyList_GetItem(obj1,i));
                else if (PyInt_Check(o)) {
                    arg2[i] = PyInt_AsLong(PyList_GetItem(obj1,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg2);
                    return NULL;
                }
            }
            arg2[i] = 3.1459001;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    {
        /* Check if is a list */
        if (PyList_Check(obj2)) {
            int size = PyList_Size(obj2);
            int i = 0;
            arg3 = (double *) malloc((1+size)*sizeof(double));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj2,i);
                if (PyFloat_Check(o))
                arg3[i] = PyFloat_AsDouble(PyList_GetItem(obj2,i));
                else if (PyInt_Check(o)) {
                    arg3[i] = PyInt_AsLong(PyList_GetItem(obj2,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg3);
                    return NULL;
                }
            }
            arg3[i] = 3.1459001;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    result = (double)NBcompareLists(arg1,arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    {
        if (arg2 != NULL)
        free((double *) arg2);
    }
    {
        if (arg3 != NULL)
        free((double *) arg3);
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL)
        free((double *) arg2);
    }
    {
        if (arg3 != NULL)
        free((double *) arg3);
    }
    return NULL;
}


static PyObject *_wrap_NBstoreModel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    double *arg2 ;
    struct NBModel *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = NULL;
    }
    if(!PyArg_ParseTuple(args,(char *)"OOO:NBstoreModel",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);
            int i = 0;
            arg2 = (double *) malloc((1+size)*sizeof(double));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj1,i);
                if (PyFloat_Check(o))
                arg2[i] = PyFloat_AsDouble(PyList_GetItem(obj1,i));
                else if (PyInt_Check(o)) {
                    arg2[i] = PyInt_AsLong(PyList_GetItem(obj1,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg2);
                    return NULL;
                }
            }
            arg2[i] = 3.1459001;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    {
        PyObject *p, *sing, *grup;
        
        arg3 = (struct NBModel *) malloc(sizeof(struct NBInput));
        arg3->nosingles = 0;
        arg3->singles = NULL;
        arg3->nogroups = 0;
        arg3->groups = NULL;
        
        sing = PyTuple_GetItem(obj2,0);
        if (PyList_Check(sing)) {
            int i;
            
            arg3->nosingles = PyList_Size(sing);
            if(arg3->nosingles > 0) {
                arg3->singles = (int *)malloc(sizeof(int)*arg3->nosingles);
                for (i = 0; i < arg3->nosingles; i++) {
                    arg3->singles[i] = PyInt_AsLong(PyList_GetItem(sing,i));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #0 not a list of singles");
            return NULL;
        }
        
        grup = PyTuple_GetItem(obj2,1);
        if (PyList_Check(grup)) {
            int i, j, msize;
            
            arg3->nogroups = PyList_Size(grup);
            if(arg3->nogroups > 0) {
                arg3->groups = (struct NBGroup *)malloc(sizeof(struct NBGroup)*arg3->nogroups);
                for (i = 0; i < arg3->nogroups; i++) {
                    PyObject *o = PyList_GetItem(grup,i);
                    msize = PyList_Size(o);
                    arg3->groups[i].n = msize;
                    arg3->groups[i].l = (int *)malloc(sizeof(int)*msize);
                    for (j = 0; j < msize; ++j)
                    arg3->groups[i].l[j] = PyInt_AsLong(PyList_GetItem(o,j));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not a list of groups");
            return NULL;
        }
    }
    NBstoreModel(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg2 != NULL)
        free((double *) arg2);
    }
    {
        int i;
        if(arg3->singles != NULL)
        free(arg3->singles);
        if(arg3->groups != NULL) {
            for (i = 0; i < arg3->nogroups; ++i) {
                free(arg3->groups[i].l);
            }
            free(arg3->groups);
        }
        free(arg3);
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL)
        free((double *) arg2);
    }
    {
        int i;
        if(arg3->singles != NULL)
        free(arg3->singles);
        if(arg3->groups != NULL) {
            for (i = 0; i < arg3->nogroups; ++i) {
                free(arg3->groups[i].l);
            }
            free(arg3->groups);
        }
        free(arg3);
    }
    return NULL;
}


static PyObject *_wrap_NBclassify(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    int *arg2 ;
    struct NBList *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct NBList *)malloc(sizeof(struct NBList));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:NBclassify",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);
            int i = 0;
            arg2 = (int *) malloc((1+size)*sizeof(int));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj1,i);
                if (PyInt_Check(o)) {
                    arg2[i] = PyInt_AsLong(PyList_GetItem(obj1,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg2);
                    return NULL;
                }
            }
            arg2[i] = -1;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    NBclassify(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg3->n);
        
        for(i = 0; i < arg3->n; ++i) {
            q = PyFloat_FromDouble(arg3->l[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg3->l);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg2 != NULL)
        free((int *) arg2);
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL)
        free((int *) arg2);
    }
    return NULL;
}


static PyObject *_wrap_NBclassifyW(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    int *arg2 ;
    struct NBList *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct NBList *)malloc(sizeof(struct NBList));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:NBclassifyW",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);
            int i = 0;
            arg2 = (int *) malloc((1+size)*sizeof(int));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj1,i);
                if (PyInt_Check(o)) {
                    arg2[i] = PyInt_AsLong(PyList_GetItem(obj1,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg2);
                    return NULL;
                }
            }
            arg2[i] = -1;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    NBclassifyW(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg3->n);
        
        for(i = 0; i < arg3->n; ++i) {
            q = PyFloat_FromDouble(arg3->l[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg3->l);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg2 != NULL)
        free((int *) arg2);
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL)
        free((int *) arg2);
    }
    return NULL;
}


static PyObject *_wrap_NBupdate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct NBInfo *arg1 ;
    int arg2 ;
    int arg3 ;
    int *arg4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj3  = 0 ;
    
    {
        arg4 = NULL;
    }
    if(!PyArg_ParseTuple(args,(char *)"OiiO:NBupdate",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NBInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj3)) {
            int size = PyList_Size(obj3);
            int i = 0;
            arg4 = (int *) malloc((1+size)*sizeof(int));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj3,i);
                if (PyInt_Check(o)) {
                    arg4[i] = PyInt_AsLong(PyList_GetItem(obj3,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg4);
                    return NULL;
                }
            }
            arg4[i] = -1;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    NBupdate(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg4 != NULL)
        free((int *) arg4);
    }
    return resultobj;
    fail:
    {
        if (arg4 != NULL)
        free((int *) arg4);
    }
    return NULL;
}


static PyObject *_wrap_Ksetmodel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    struct KModel *arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:Ksetmodel",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyObject *p;
        
        arg2 = (struct KModel *) malloc(sizeof(struct KModel));
        arg2->nogroups = 0;
        arg2->groups = NULL;
        
        if (PyList_Check(obj1)) {
            int i, j, msize;
            
            arg2->nogroups = PyList_Size(obj1);
            if(arg2->nogroups > 0) {
                arg2->groups = (struct KGroup *)malloc(sizeof(struct KGroup)*arg2->nogroups);
                for (i = 0; i < arg2->nogroups; i++) {
                    PyObject *o = PyList_GetItem(obj1,i);
                    PyObject *list = PyTuple_GetItem(o,1);
                    msize = PyList_Size(list);
                    arg2->groups[i].n = msize;
                    arg2->groups[i].l = (int *)malloc(sizeof(int)*msize);
                    for (j = 0; j < msize; ++j)
                    arg2->groups[i].l[j] = PyInt_AsLong(PyList_GetItem(list,j));
                    arg2->groups[i].times = PyInt_AsLong(PyTuple_GetItem(o,0));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not a list of groups");
            return NULL;
        }
    }
    Ksetmodel(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return resultobj;
    fail:
    {
        int i;
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return NULL;
}


static PyObject *_wrap_Kaddmodel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    struct KModel *arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:Kaddmodel",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyObject *p;
        
        arg2 = (struct KModel *) malloc(sizeof(struct KModel));
        arg2->nogroups = 0;
        arg2->groups = NULL;
        
        if (PyList_Check(obj1)) {
            int i, j, msize;
            
            arg2->nogroups = PyList_Size(obj1);
            if(arg2->nogroups > 0) {
                arg2->groups = (struct KGroup *)malloc(sizeof(struct KGroup)*arg2->nogroups);
                for (i = 0; i < arg2->nogroups; i++) {
                    PyObject *o = PyList_GetItem(obj1,i);
                    PyObject *list = PyTuple_GetItem(o,1);
                    msize = PyList_Size(list);
                    arg2->groups[i].n = msize;
                    arg2->groups[i].l = (int *)malloc(sizeof(int)*msize);
                    for (j = 0; j < msize; ++j)
                    arg2->groups[i].l[j] = PyInt_AsLong(PyList_GetItem(list,j));
                    arg2->groups[i].times = PyInt_AsLong(PyTuple_GetItem(o,0));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not a list of groups");
            return NULL;
        }
    }
    Kaddmodel(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return resultobj;
    fail:
    {
        int i;
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return NULL;
}


static PyObject *_wrap_Ktestaddition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    struct KModel *arg2 ;
    struct KList *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct KList *)malloc(sizeof(struct KList));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:Ktestaddition",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyObject *p;
        
        arg2 = (struct KModel *) malloc(sizeof(struct KModel));
        arg2->nogroups = 0;
        arg2->groups = NULL;
        
        if (PyList_Check(obj1)) {
            int i, j, msize;
            
            arg2->nogroups = PyList_Size(obj1);
            if(arg2->nogroups > 0) {
                arg2->groups = (struct KGroup *)malloc(sizeof(struct KGroup)*arg2->nogroups);
                for (i = 0; i < arg2->nogroups; i++) {
                    PyObject *o = PyList_GetItem(obj1,i);
                    PyObject *list = PyTuple_GetItem(o,1);
                    msize = PyList_Size(list);
                    arg2->groups[i].n = msize;
                    arg2->groups[i].l = (int *)malloc(sizeof(int)*msize);
                    for (j = 0; j < msize; ++j)
                    arg2->groups[i].l[j] = PyInt_AsLong(PyList_GetItem(list,j));
                    arg2->groups[i].times = PyInt_AsLong(PyTuple_GetItem(o,0));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not a list of groups");
            return NULL;
        }
    }
    Ktestaddition(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg3->n);
        
        for(i = 0; i < arg3->n; ++i) {
            q = PyFloat_FromDouble(arg3->l[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg3->l);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        int i;
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return resultobj;
    fail:
    {
        int i;
        if(arg2->groups != NULL) {
            for (i = 0; i < arg2->nogroups; ++i) {
                free(arg2->groups[i].l);
            }
            free(arg2->groups);
        }
        free(arg2);
    }
    return NULL;
}


static PyObject *_wrap_Kdie(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Kdie",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    Kdie(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Kuse(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    int *arg2 ;
    struct KList *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct KList *)malloc(sizeof(struct KList));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:Kuse",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);
            int i = 0;
            arg2 = (int *) malloc((1+size)*sizeof(int));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj1,i);
                if (PyInt_Check(o)) {
                    arg2[i] = PyInt_AsLong(PyList_GetItem(obj1,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg2);
                    return NULL;
                }
            }
            arg2[i] = -1;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    Kuse(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg3->n);
        
        for(i = 0; i < arg3->n; ++i) {
            q = PyFloat_FromDouble(arg3->l[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg3->l);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg2 != NULL)
        free((int *) arg2);
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL)
        free((int *) arg2);
    }
    return NULL;
}


static PyObject *_wrap_Kvalidate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    int *arg2 ;
    double result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:Kvalidate",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);
            int i = 0;
            arg2 = (int *) malloc((1+size)*sizeof(int));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj1,i);
                if (PyInt_Check(o)) {
                    arg2[i] = PyInt_AsLong(PyList_GetItem(obj1,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg2);
                    return NULL;
                }
            }
            arg2[i] = -1;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    result = (double)Kvalidate(arg1,arg2);
    
    resultobj = PyFloat_FromDouble(result);
    {
        if (arg2 != NULL)
        free((int *) arg2);
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL)
        free((int *) arg2);
    }
    return NULL;
}


static PyObject *_wrap_Kremember(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInput *arg1 ;
    double arg2 ;
    struct KInfo *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Kremember",&obj0,&arg2)) goto fail;
    {
        int i, j, size, msize;
        PyObject *arr,*cards;
        /* Check if is a list */
        
        arr = PyTuple_GetItem(obj0,0);
        if (PyList_Check(arr)) {
            size = PyList_Size(arr);
            msize = 0;
            //printf("lr:-1\n");
            arg1 = (struct KInput *) malloc(sizeof(struct KInput));
            arg1->data = NULL;
            arg1->card = NULL;
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(arr,i);
                if (PyList_Check(o)) {
                    int zsize = PyList_Size(o);
                    if (arg1->data == NULL) {
                        msize = zsize;
                        arg1->nn = size;
                        arg1->k = msize;
                        arg1->na = arg1->k-1; // number of attributes
                        arg1->data = (int **)malloc(sizeof(int *)*(size));
                        for (j = 0; j < size; ++j) {
                            arg1->data[j] = (int *)malloc(sizeof(int)*(arg1->k));
                        }
                        arg1->card = (int *)malloc(sizeof(int)*(arg1->k));
                    }
                    if (zsize == msize) {
                        // fetch the attribute values
                        for (j = 0; j < arg1->k; ++j) {
                            PyObject *p = PyList_GetItem(o,j);
                            if (PyFloat_Check(p)) {
                                // correct +1 because that array starts at 1
                                arg1->data[i][j] = PyFloat_AsDouble(p);
                            }else if (PyInt_Check(p)) {
                                arg1->data[i][j] = (double)PyInt_AsLong(p);
                            }else {
                                PyErr_SetString(PyExc_TypeError,"examples must contain doubles or ints");
                                Kcleanup(arg1);
                                return NULL;
                            }
                        }
                    }else {
                        PyErr_SetString(PyExc_TypeError,"examples must be of equal size");
                        Kcleanup(arg1);
                        return NULL;
                    }
                }else {
                    PyErr_SetString(PyExc_TypeError,"example table must contain examples as lists");
                    Kcleanup(arg1);
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #0 not a list");
            return NULL;
        }
        
        
        // fetch the cardinalities
        cards = PyTuple_GetItem(obj0,1);
        if (!PyList_Check(cards) && PyList_Size(cards) != arg1->k) {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not an attribute cardinality list");
            return NULL;
        }
        
        for (j = 0; j < arg1->k; ++j) {
            PyObject *p = PyList_GetItem(cards,j);
            if (PyInt_Check(p)) {
                arg1->card[j] = PyInt_AsLong(p);
            }else {
                PyErr_SetString(PyExc_TypeError,"card list must contain ints");
                Kcleanup(arg1);
                return NULL;
            }
        }
    }
    result = (struct KInfo *)Kremember(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Klearn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    int arg2 ;
    int arg3 ;
    struct KMatrix *arg4 ;
    PyObject * obj0  = 0 ;
    
    {
        arg4 = (struct KMatrix *)malloc(sizeof(struct KMatrix));
    }
    if(!PyArg_ParseTuple(args,(char *)"Oii:Klearn",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    Klearn(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j;
        PyObject *o, *p, *q;
        
        o = PyList_New(arg4->rows);
        
        for(i = 0; i < arg4->rows; ++i) {
            p = PyList_New(arg4->columns);
            for(j = 0; j < arg4->columns; ++j) {
                q = PyFloat_FromDouble(arg4->l[i*arg4->columns + j]);
                PyList_SetItem(p, j, q);
            }
            PyList_SetItem(o, i, p);
        }
        free(arg4->l);
        free(arg4);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KgetDOF(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    struct KList *arg2 ;
    PyObject * obj0  = 0 ;
    
    {
        arg2 = (struct KList *)malloc(sizeof(struct KList));
    }
    if(!PyArg_ParseTuple(args,(char *)"O:KgetDOF",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    KgetDOF(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg2->n);
        
        for(i = 0; i < arg2->n; ++i) {
            q = PyFloat_FromDouble(arg2->l[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg2->l);
        free(arg2);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Kcheckreversal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    struct KList *arg2 ;
    PyObject * obj0  = 0 ;
    
    {
        arg2 = (struct KList *)malloc(sizeof(struct KList));
    }
    if(!PyArg_ParseTuple(args,(char *)"O:Kcheckreversal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    Kcheckreversal(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg2->n);
        
        for(i = 0; i < arg2->n; ++i) {
            q = PyFloat_FromDouble(arg2->l[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg2->l);
        free(arg2);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Ksetensemble(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    struct KModels *arg2 ;
    struct KArray *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = NULL;
    }
    if(!PyArg_ParseTuple(args,(char *)"OOO:Ksetensemble",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyObject *p;
        
        arg2 = (struct KModels *) malloc(sizeof(struct KModels));
        arg2->nomodels = 0;
        arg2->models = NULL;
        
        if (PyList_Check(obj1)) {
            int i, j, k,msize;
            KModel *mod;
            
            arg2->nomodels = PyList_Size(obj1);
            if(arg2->nomodels > 0) {
                arg2->models = (struct KModel *)malloc(sizeof(struct KModel)*arg2->nomodels);
                for (k = 0; k < arg2->nomodels; k++) {
                    p = PyList_GetItem(obj1,k);
                    mod = arg2->models + k;
                    mod->groups = NULL;
                    mod->nogroups = PyList_Size(p);
                    if(mod->nogroups > 0) {
                        mod->groups = (struct KGroup *)malloc(sizeof(struct KGroup)*mod->nogroups);
                        for (i = 0; i < mod->nogroups; i++) {
                            PyObject *o = PyList_GetItem(p,i);
                            PyObject *list = PyTuple_GetItem(o,1);
                            msize = PyList_Size(list);
                            mod->groups[i].n = msize;
                            mod->groups[i].l = (int *)malloc(sizeof(int)*msize);
                            for (j = 0; j < msize; ++j)
                            mod->groups[i].l[j] = PyInt_AsLong(PyList_GetItem(list,j));
                            mod->groups[i].times = PyInt_AsLong(PyTuple_GetItem(o,0));
                        }
                    }
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not a list of groups");
            return NULL;
        }
    }
    {
        PyObject *p;
        
        arg3 = (struct KArray *) malloc(sizeof(struct KArray));
        arg3->n = 0;
        arg3->l = NULL;
        
        if (PyList_Check(obj2)) {
            int i, j, msize;
            
            arg3->n = PyList_Size(obj2);
            if(arg3->n > 0) {
                arg3->l = (double *)malloc(sizeof(double)*arg3->n);
                for (i = 0; i < arg3->n; i++) {
                    arg3->l[i] = PyFloat_AsDouble(PyList_GetItem(obj2,i));
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"this is not a list of doubles");
            return NULL;
        }
    }
    Ksetensemble(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j,k;
        KModel *mod;
        if(arg2->models != NULL) {
            for (k = 0; k < arg2->nomodels; ++k) {
                mod = arg2->models+k;
                if(mod->groups != NULL) {
                    for (i = 0; i < mod->nogroups; ++i) {
                        free(mod->groups[i].l);
                    }
                    free(mod->groups);
                }
            }
            free(arg2->models);
        }
        free(arg2);
    }
    {
        int i;
        if(arg3->l != NULL) {
            free(arg3->l);
        }
        free(arg3);
    }
    return resultobj;
    fail:
    {
        int i,j,k;
        KModel *mod;
        if(arg2->models != NULL) {
            for (k = 0; k < arg2->nomodels; ++k) {
                mod = arg2->models+k;
                if(mod->groups != NULL) {
                    for (i = 0; i < mod->nogroups; ++i) {
                        free(mod->groups[i].l);
                    }
                    free(mod->groups);
                }
            }
            free(arg2->models);
        }
        free(arg2);
    }
    {
        int i;
        if(arg3->l != NULL) {
            free(arg3->l);
        }
        free(arg3);
    }
    return NULL;
}


static PyObject *_wrap_Kuseensemble(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    int *arg2 ;
    struct KList *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg3 = (struct KList *)malloc(sizeof(struct KList));
    }
    if(!PyArg_ParseTuple(args,(char *)"OO:Kuseensemble",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);
            int i = 0;
            arg2 = (int *) malloc((1+size)*sizeof(int));
            for (i = 0; i < size; i++) {
                PyObject *o = PyList_GetItem(obj1,i);
                if (PyInt_Check(o)) {
                    arg2[i] = PyInt_AsLong(PyList_GetItem(obj1,i));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain floats");
                    free(arg2);
                    return NULL;
                }
            }
            arg2[i] = -1;
        }else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    Kuseensemble(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i;
        PyObject *o, *q;
        
        o = PyList_New(arg3->n);
        
        for(i = 0; i < arg3->n; ++i) {
            q = PyFloat_FromDouble(arg3->l[i]);
            PyList_SetItem(o, i, q);
        }
        free(arg3->l);
        free(arg3);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        if (arg2 != NULL)
        free((int *) arg2);
    }
    return resultobj;
    fail:
    {
        if (arg2 != NULL)
        free((int *) arg2);
    }
    return NULL;
}


static PyObject *_wrap_Ktestmodels(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct KInfo *arg1 ;
    struct KModels *arg2 ;
    int arg3 ;
    struct KMatrix *arg4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    {
        arg2 = NULL;
    }
    {
        arg4 = (struct KMatrix *)malloc(sizeof(struct KMatrix));
    }
    if(!PyArg_ParseTuple(args,(char *)"OOi:Ktestmodels",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        PyObject *p;
        
        arg2 = (struct KModels *) malloc(sizeof(struct KModels));
        arg2->nomodels = 0;
        arg2->models = NULL;
        
        if (PyList_Check(obj1)) {
            int i, j, k,msize;
            KModel *mod;
            
            arg2->nomodels = PyList_Size(obj1);
            if(arg2->nomodels > 0) {
                arg2->models = (struct KModel *)malloc(sizeof(struct KModel)*arg2->nomodels);
                for (k = 0; k < arg2->nomodels; k++) {
                    p = PyList_GetItem(obj1,k);
                    mod = arg2->models + k;
                    mod->groups = NULL;
                    mod->nogroups = PyList_Size(p);
                    if(mod->nogroups > 0) {
                        mod->groups = (struct KGroup *)malloc(sizeof(struct KGroup)*mod->nogroups);
                        for (i = 0; i < mod->nogroups; i++) {
                            PyObject *o = PyList_GetItem(p,i);
                            PyObject *list = PyTuple_GetItem(o,1);
                            msize = PyList_Size(list);
                            mod->groups[i].n = msize;
                            mod->groups[i].l = (int *)malloc(sizeof(int)*msize);
                            for (j = 0; j < msize; ++j)
                            mod->groups[i].l[j] = PyInt_AsLong(PyList_GetItem(list,j));
                            mod->groups[i].times = PyInt_AsLong(PyTuple_GetItem(o,0));
                        }
                    }
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"tuple element #1 not a list of groups");
            return NULL;
        }
    }
    Ktestmodels(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        int i,j;
        PyObject *o, *p, *q;
        
        o = PyList_New(arg4->rows);
        
        for(i = 0; i < arg4->rows; ++i) {
            p = PyList_New(arg4->columns);
            for(j = 0; j < arg4->columns; ++j) {
                q = PyFloat_FromDouble(arg4->l[i*arg4->columns + j]);
                PyList_SetItem(p, j, q);
            }
            PyList_SetItem(o, i, p);
        }
        free(arg4->l);
        free(arg4);
        
        if ((!resultobj) || (resultobj == Py_None)) {
            resultobj = o;
        }else {
            if (!PyList_Check(resultobj)) {
                PyObject *o2 = resultobj;
                resultobj = PyList_New(0);
                PyList_Append(resultobj,o2);
                Py_XDECREF(o2);
            }
            PyList_Append(resultobj,o);
            Py_XDECREF(o);
        }
    }
    {
        int i,j,k;
        KModel *mod;
        if(arg2->models != NULL) {
            for (k = 0; k < arg2->nomodels; ++k) {
                mod = arg2->models+k;
                if(mod->groups != NULL) {
                    for (i = 0; i < mod->nogroups; ++i) {
                        free(mod->groups[i].l);
                    }
                    free(mod->groups);
                }
            }
            free(arg2->models);
        }
        free(arg2);
    }
    return resultobj;
    fail:
    {
        int i,j,k;
        KModel *mod;
        if(arg2->models != NULL) {
            for (k = 0; k < arg2->nomodels; ++k) {
                mod = arg2->models+k;
                if(mod->groups != NULL) {
                    for (i = 0; i < mod->nogroups; ++i) {
                        free(mod->groups[i].l);
                    }
                    free(mod->groups);
                }
            }
            free(arg2->models);
        }
        free(arg2);
    }
    return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"svm_destroy_model", _wrap_svm_destroy_model, METH_VARARGS },
	 { (char *)"SVMClassifier", _wrap_SVMClassifier, METH_VARARGS },
	 { (char *)"SVMLearnS", _wrap_SVMLearnS, METH_VARARGS },
	 { (char *)"SVMLearn", _wrap_SVMLearn, METH_VARARGS },
	 { (char *)"SVMClassify", _wrap_SVMClassify, METH_VARARGS },
	 { (char *)"SVMClassifyP", _wrap_SVMClassifyP, METH_VARARGS },
	 { (char *)"SVMClassifyM", _wrap_SVMClassifyM, METH_VARARGS },
	 { (char *)"SVMClassifyS", _wrap_SVMClassifyS, METH_VARARGS },
	 { (char *)"SVMClassifyPS", _wrap_SVMClassifyPS, METH_VARARGS },
	 { (char *)"SVMClassifyMS", _wrap_SVMClassifyMS, METH_VARARGS },
	 { (char *)"MCluster", _wrap_MCluster, METH_VARARGS },
	 { (char *)"HCluster", _wrap_HCluster, METH_VARARGS },
	 { (char *)"DMCluster", _wrap_DMCluster, METH_VARARGS },
	 { (char *)"DHCluster", _wrap_DHCluster, METH_VARARGS },
	 { (char *)"FCluster", _wrap_FCluster, METH_VARARGS },
	 { (char *)"DFCluster", _wrap_DFCluster, METH_VARARGS },
	 { (char *)"LogReg", _wrap_LogReg, METH_VARARGS },
	 { (char *)"Computer", _wrap_Computer, METH_VARARGS },
	 { (char *)"NBprepare", _wrap_NBprepare, METH_VARARGS },
	 { (char *)"NBkill", _wrap_NBkill, METH_VARARGS },
	 { (char *)"NBcleanup", _wrap_NBcleanup, METH_VARARGS },
	 { (char *)"NBquality", _wrap_NBquality, METH_VARARGS },
	 { (char *)"TANquality", _wrap_TANquality, METH_VARARGS },
	 { (char *)"NBdivergence", _wrap_NBdivergence, METH_VARARGS },
	 { (char *)"NBqualityW", _wrap_NBqualityW, METH_VARARGS },
	 { (char *)"NBsaveScores", _wrap_NBsaveScores, METH_VARARGS },
	 { (char *)"NBrememberScores", _wrap_NBrememberScores, METH_VARARGS },
	 { (char *)"NBcompareScores", _wrap_NBcompareScores, METH_VARARGS },
	 { (char *)"NBexportScores", _wrap_NBexportScores, METH_VARARGS },
	 { (char *)"NBexportProbabilities", _wrap_NBexportProbabilities, METH_VARARGS },
	 { (char *)"NBcompareLists", _wrap_NBcompareLists, METH_VARARGS },
	 { (char *)"NBstoreModel", _wrap_NBstoreModel, METH_VARARGS },
	 { (char *)"NBclassify", _wrap_NBclassify, METH_VARARGS },
	 { (char *)"NBclassifyW", _wrap_NBclassifyW, METH_VARARGS },
	 { (char *)"NBupdate", _wrap_NBupdate, METH_VARARGS },
	 { (char *)"Ksetmodel", _wrap_Ksetmodel, METH_VARARGS },
	 { (char *)"Kaddmodel", _wrap_Kaddmodel, METH_VARARGS },
	 { (char *)"Ktestaddition", _wrap_Ktestaddition, METH_VARARGS },
	 { (char *)"Kdie", _wrap_Kdie, METH_VARARGS },
	 { (char *)"Kuse", _wrap_Kuse, METH_VARARGS },
	 { (char *)"Kvalidate", _wrap_Kvalidate, METH_VARARGS },
	 { (char *)"Kremember", _wrap_Kremember, METH_VARARGS },
	 { (char *)"Klearn", _wrap_Klearn, METH_VARARGS },
	 { (char *)"KgetDOF", _wrap_KgetDOF, METH_VARARGS },
	 { (char *)"Kcheckreversal", _wrap_Kcheckreversal, METH_VARARGS },
	 { (char *)"Ksetensemble", _wrap_Ksetensemble, METH_VARARGS },
	 { (char *)"Kuseensemble", _wrap_Kuseensemble, METH_VARARGS },
	 { (char *)"Ktestmodels", _wrap_Ktestmodels, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_CFInfo[] = {{"_p_CFInfo", 0, "struct CFInfo *", 0},{"_p_CFInfo"},{0}};
static swig_type_info _swigt__p_KArray[] = {{"_p_KArray", 0, "struct KArray *", 0},{"_p_KArray"},{0}};
static swig_type_info _swigt__p_double[] = {{"_p_double", 0, "double *", 0},{"_p_double"},{0}};
static swig_type_info _swigt__p_psvm_model[] = {{"_p_psvm_model", 0, "psvm_model *", 0},{"_p_psvm_model"},{0}};
static swig_type_info _swigt__p_svm_model[] = {{"_p_svm_model", 0, "struct svm_model *", 0},{"_p_svm_model"},{0}};
static swig_type_info _swigt__p_KInfo[] = {{"_p_KInfo", 0, "struct KInfo *", 0},{"_p_KInfo"},{0}};
static swig_type_info _swigt__p_KModel[] = {{"_p_KModel", 0, "struct KModel *", 0},{"_p_KModel"},{0}};
static swig_type_info _swigt__p_SVMOut[] = {{"_p_SVMOut", 0, "struct SVMOut *", 0},{"_p_SVMOut"},{0}};
static swig_type_info _swigt__p_SVMSparseExample[] = {{"_p_SVMSparseExample", 0, "struct SVMSparseExample *", 0},{"_p_SVMSparseExample"},{0}};
static swig_type_info _swigt__p_SVMExample[] = {{"_p_SVMExample", 0, "struct SVMExample *", 0},{"_p_SVMExample"},{0}};
static swig_type_info _swigt__p_LRInfo[] = {{"_p_LRInfo", 0, "struct LRInfo *", 0},{"_p_LRInfo"},{0}};
static swig_type_info _swigt__p_KInput[] = {{"_p_KInput", 0, "struct KInput *", 0},{"_p_KInput"},{0}};
static swig_type_info _swigt__p_CInput[] = {{"_p_CInput", 0, "struct CInput *", 0},{"_p_CInput"},{0}};
static swig_type_info _swigt__p_LRInput[] = {{"_p_LRInput", 0, "struct LRInput *", 0},{"_p_LRInput"},{0}};
static swig_type_info _swigt__p_NBModel[] = {{"_p_NBModel", 0, "struct NBModel *", 0},{"_p_NBModel"},{0}};
static swig_type_info _swigt__p_KList[] = {{"_p_KList", 0, "struct KList *", 0},{"_p_KList"},{0}};
static swig_type_info _swigt__p_KMatrix[] = {{"_p_KMatrix", 0, "struct KMatrix *", 0},{"_p_KMatrix"},{0}};
static swig_type_info _swigt__p_KModels[] = {{"_p_KModels", 0, "struct KModels *", 0},{"_p_KModels"},{0}};
static swig_type_info _swigt__p_DInput[] = {{"_p_DInput", 0, "struct DInput *", 0},{"_p_DInput"},{0}};
static swig_type_info _swigt__p_NBInput[] = {{"_p_NBInput", 0, "struct NBInput *", 0},{"_p_NBInput"},{0}};
static swig_type_info _swigt__p_NBInfo[] = {{"_p_NBInfo", 0, "struct NBInfo *", 0},{"_p_NBInfo"},{0}};
static swig_type_info _swigt__p_CMInfo[] = {{"_p_CMInfo", 0, "struct CMInfo *", 0},{"_p_CMInfo"},{0}};
static swig_type_info _swigt__p_NBResult[] = {{"_p_NBResult", 0, "struct NBResult *", 0},{"_p_NBResult"},{0}};
static swig_type_info _swigt__p_NBList[] = {{"_p_NBList", 0, "struct NBList *", 0},{"_p_NBList"},{0}};
static swig_type_info _swigt__p_SVMInput[] = {{"_p_SVMInput", 0, "struct SVMInput *", 0},{"_p_SVMInput"},{0}};
static swig_type_info _swigt__p_XX[] = {{"_p_XX", 0, "struct XX *", 0},{"_p_XX"},{0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0},{"_p_int"},{0}};
static swig_type_info _swigt__p_SVMSparseInput[] = {{"_p_SVMSparseInput", 0, "struct SVMSparseInput *", 0},{"_p_SVMSparseInput"},{0}};
static swig_type_info _swigt__p_CHInfo[] = {{"_p_CHInfo", 0, "struct CHInfo *", 0},{"_p_CHInfo"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_CFInfo, 
_swigt__p_KArray, 
_swigt__p_double, 
_swigt__p_psvm_model, 
_swigt__p_svm_model, 
_swigt__p_KInfo, 
_swigt__p_KModel, 
_swigt__p_SVMOut, 
_swigt__p_SVMSparseExample, 
_swigt__p_SVMExample, 
_swigt__p_LRInfo, 
_swigt__p_KInput, 
_swigt__p_CInput, 
_swigt__p_LRInput, 
_swigt__p_NBModel, 
_swigt__p_KList, 
_swigt__p_KMatrix, 
_swigt__p_KModels, 
_swigt__p_DInput, 
_swigt__p_NBInput, 
_swigt__p_NBInfo, 
_swigt__p_CMInfo, 
_swigt__p_NBResult, 
_swigt__p_NBList, 
_swigt__p_SVMInput, 
_swigt__p_XX, 
_swigt__p_int, 
_swigt__p_SVMSparseInput, 
_swigt__p_CHInfo, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

